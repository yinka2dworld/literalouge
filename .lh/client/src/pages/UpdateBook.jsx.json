{
    "sourceFile": "client/src/pages/UpdateBook.jsx",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 25,
            "patches": [
                {
                    "date": 1741762635286,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1741765430887,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,211 +1,1 @@\n-import { useMutation } from '@apollo/client';\r\n-import { useParams, useNavigate } from \"react-router-dom\";\r\n-import { useState } from 'react';\r\n-import Navbar from '../layout/Navbar.jsx';\r\n-import Footer from '../layout/Footer.jsx';\r\n-import { UPDATEBOOK } from '../graphql/mutations.js';\r\n \r\n-const UpdateBook = () => {\r\n-  const { bookId } = useParams();\r\n-  const navigate = useNavigate();\r\n-  const [formData, setFormData] = useState({\r\n-    bookCover: null,\r\n-    bookName: '',\r\n-    bookDescription: '',\r\n-    bookAuthor: '',\r\n-    bookCategory: '',\r\n-    bookLanguage: '',\r\n-    bookFile: null,\r\n-  });\r\n-\r\n-  const [updateBook, { loading, error }] = useMutation(UPDATEBOOK);\r\n-\r\n-  const handleInputChange = (e) => {\r\n-    const { name, value, files } = e.target;\r\n-    setFormData((prev) => ({\r\n-      ...prev,\r\n-      [name]: files ? files[0] : value,\r\n-    }));\r\n-  };\r\n-\r\n-  const handleFileUpload = async (file) => {\r\n-    if (!file) return null;\r\n-    return file.name; \r\n-  };\r\n-\r\n-  const handleUpdate = async (e) => {\r\n-    e.preventDefault();\r\n-\r\n-    const token = localStorage.getItem('token');\r\n-    const bookCover = await handleFileUpload(formData.bookCover);\r\n-    const bookFile = await handleFileUpload(formData.bookFile);\r\n-\r\n-    try {\r\n-      const { data } = await updateBook({\r\n-        variables: {\r\n-          updateBookId: bookId,\r\n-          updatebook: {\r\n-            bookCover,\r\n-            bookName: formData.bookName,\r\n-            bookDescription: formData.bookDescription,\r\n-            bookAuthor: formData.bookAuthor,\r\n-            bookCategory: formData.bookCategory,\r\n-            bookLanguage: formData.bookLanguage,\r\n-            bookFile,\r\n-          },\r\n-        },\r\n-        context: {\r\n-          headers: {\r\n-            Authorization: 'Bearer '+token,\r\n-          },\r\n-        },\r\n-      });\r\n-\r\n-      if (data.updateBook.success) {\r\n-        alert('Book updated successfully!');\r\n-        navigate('/home'); // Navigate to the home page or book list.\r\n-      } else {\r\n-        alert(data.updateBook.message || 'Failed to update the book.');\r\n-      }\r\n-    } catch (error) {\r\n-      console.error('Error updating book:', error.message);\r\n-      alert('An error occurred while updating the book. Please try again.');\r\n-    }\r\n-  };\r\n-\r\n-  const categories = [\r\n-    'Fiction',\r\n-    'Non-Fiction',\r\n-    'Science',\r\n-    'History',\r\n-    'Biography',\r\n-    'Fantasy',\r\n-    'Education',\r\n-  ];\r\n-\r\n-  const africanLanguages = [\r\n-    'Swahili',\r\n-    'Yoruba',\r\n-    'Zulu',\r\n-    'Amharic',\r\n-    'Hausa',\r\n-    'Somali',\r\n-    'Shona',\r\n-    'Oromo',\r\n-    'Fulbe',\r\n-    'Wollof',\r\n-    'Xhosa',\r\n-    'Afar',\r\n-    'Akan',\r\n-  ];\r\n-\r\n-  return (\r\n-    <div className=\"container\">\r\n-      <Navbar />\r\n-      <div className=\"form-container\">\r\n-        <h2>Update Book</h2>\r\n-        {error && (\r\n-          <p className=\"errorMsg\">\r\n-            {error.message || 'An unexpected error occurred.'}\r\n-          </p>\r\n-        )}\r\n-        <form className=\"create\" onSubmit={handleUpdate}>\r\n-          <div className=\"form-group\">\r\n-            <label htmlFor=\"bookCover\" className=\"label\">Book Cover</label>\r\n-            <input\r\n-              type=\"file\"\r\n-              name=\"bookCover\"\r\n-              accept=\".png, .jpg, .jpeg\"\r\n-              className=\"input-text\"\r\n-              onChange={handleInputChange}\r\n-            />\r\n-          </div>\r\n-          <div className=\"form-group\">\r\n-            <label htmlFor=\"bookName\" className=\"label\">Book Name</label>\r\n-            <input\r\n-              type=\"text\"\r\n-              name=\"bookName\"\r\n-              value={formData.bookName}\r\n-              className=\"input-text\"\r\n-              onChange={handleInputChange}\r\n-              required\r\n-            />\r\n-          </div>\r\n-          <div className=\"form-group\">\r\n-            <label htmlFor=\"bookAuthor\" className=\"label\">Author</label>\r\n-            <input\r\n-              type=\"text\"\r\n-              name=\"bookAuthor\"\r\n-              value={formData.bookAuthor}\r\n-              className=\"input-text\"\r\n-              onChange={handleInputChange}\r\n-              required\r\n-            />\r\n-          </div>\r\n-          <div className=\"form-group\">\r\n-            <label htmlFor=\"bookDescription\" className=\"label\">Description</label>\r\n-            <textarea\r\n-              name=\"bookDescription\"\r\n-              value={formData.bookDescription}\r\n-              className=\"input-textarea\"\r\n-              onChange={handleInputChange}\r\n-              required\r\n-            />\r\n-          </div>\r\n-          <div className=\"form-group\">\r\n-            <label htmlFor=\"bookCategory\" className=\"label\">Category</label>\r\n-            <select\r\n-              name=\"bookCategory\"\r\n-              value={formData.bookCategory}\r\n-              className=\"input-select\"\r\n-              onChange={handleInputChange}\r\n-              required\r\n-            >\r\n-              <option value=\"\" disabled>Select a category</option>\r\n-              {categories.map((category) => (\r\n-                <option key={category} value={category}>\r\n-                  {category}\r\n-                </option>\r\n-              ))}\r\n-            </select>\r\n-          </div>\r\n-          <div className=\"form-group\">\r\n-            <label htmlFor=\"bookLanguage\" className=\"label\">Language</label>\r\n-            <select\r\n-              name=\"bookLanguage\"\r\n-              value={formData.bookLanguage}\r\n-              className=\"input-select\"\r\n-              onChange={handleInputChange}\r\n-              required\r\n-            >\r\n-              <option value=\"\" disabled>Select a language</option>\r\n-              {africanLanguages.map((language) => (\r\n-                <option key={language} value={language}>\r\n-                  {language}\r\n-                </option>\r\n-              ))}\r\n-            </select>\r\n-          </div>\r\n-          <div className=\"form-group\">\r\n-            <label htmlFor=\"bookFile\" className=\"label\">Book File</label>\r\n-            <input\r\n-              type=\"file\"\r\n-              name=\"bookFile\"\r\n-              accept=\".pdf, .epub\"\r\n-              className=\"input-text\"\r\n-              onChange={handleInputChange}\r\n-            />\r\n-          </div>\r\n-          <div className=\"form-group\">\r\n-            <button type=\"submit\" className=\"btn-submit\" disabled={loading}>\r\n-              {loading ? 'Updating...' : 'Update'}\r\n-            </button>\r\n-          </div>\r\n-        </form>\r\n-      </div>\r\n-      <Footer />\r\n-    </div>\r\n-  );\r\n-};\r\n-\r\n-export default UpdateBook;\r\n"
                },
                {
                    "date": 1741765801466,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,127 @@\n+import { useMutation } from '@apollo/client';\r\n+import { useParams, useNavigate } from \"react-router-dom\";\r\n+import { useState } from 'react';\r\n+import Navbar from '../layout/Navbar.jsx';\r\n+import Footer from '../layout/Footer.jsx';\r\n+import { UPDATEBOOK } from '../graphql/mutations.js';\r\n+\r\n+const UpdateBook = () => {\r\n+  const { bookId } = useParams();\r\n+  const navigate = useNavigate();\r\n+  const [formData, setFormData] = useState({\r\n+    bookCover: null,\r\n+    bookName: '',\r\n+    bookDescription: '',\r\n+    bookAuthor: '',\r\n+    bookCategory: '',\r\n+    bookLanguage: '',\r\n+    bookFile: null,\r\n+  });\r\n+\r\n+  const [updateBook, { loading, error }] = useMutation(UPDATEBOOK);\r\n+\r\n+  const handleInputChange = (e) => {\r\n+    const { name, value, files } = e.target;\r\n+    setFormData((prev) => ({\r\n+      ...prev,\r\n+      [name]: files ? files[0] : value,\r\n+    }));\r\n+  };\r\n+\r\n+  const handleUpdate = async (e) => {\r\n+    e.preventDefault();\r\n+    const token = localStorage.getItem('token');\r\n+\r\n+    try {\r\n+      const { data } = await updateBook({\r\n+        variables: {\r\n+          updateBookId: bookId,\r\n+          updatebook: {\r\n+            bookCover: formData.bookCover ? await uploadToCloudinary(formData.bookCover) : null,\r\n+            bookName: formData.bookName,\r\n+            bookDescription: formData.bookDescription,\r\n+            bookAuthor: formData.bookAuthor,\r\n+            bookCategory: formData.bookCategory,\r\n+            bookLanguage: formData.bookLanguage,\r\n+            bookFile: formData.bookFile ? await uploadToCloudinary(formData.bookFile) : null,\r\n+          },\r\n+        },\r\n+        context: {\r\n+          headers: {\r\n+            Authorization: `Bearer ${token}`,\r\n+          },\r\n+        },\r\n+      });\r\n+\r\n+      if (data.updateBook.success) {\r\n+        alert('Book updated successfully!');\r\n+        navigate('/home');\r\n+      } else {\r\n+        alert(data.updateBook.message || 'Failed to update the book.');\r\n+      }\r\n+    } catch (error) {\r\n+      console.error('Error updating book:', error.message);\r\n+      alert('An error occurred while updating the book. Please try again.');\r\n+    }\r\n+  };\r\n+\r\n+  return (\r\n+    <div className=\"container\">\r\n+      <Navbar />\r\n+      <div className=\"form-container\">\r\n+        <h2>Update Book</h2>\r\n+        {error && <p className=\"errorMsg\">{error.message || 'An unexpected error occurred.'}</p>}\r\n+        <form className=\"create\" onSubmit={handleUpdate}>\r\n+          <input type=\"file\" name=\"bookCover\" accept=\".png, .jpg, .jpeg\" onChange={handleInputChange} />\r\n+          <input type=\"text\" name=\"bookName\" value={formData.bookName} onChange={handleInputChange} required />\r\n+          <input type=\"text\" name=\"bookAuthor\" value={formData.bookAuthor} onChange={handleInputChange} required />\r\n+          <textarea name=\"bookDescription\" value={formData.bookDescription} onChange={handleInputChange} required />\r\n+          <select name=\"bookCategory\" value={formData.bookCategory} onChange={handleInputChange} required>\r\n+            <option value=\"\" disabled>Select a category</option>\r\n+            {['Fiction', 'Non-Fiction', 'Science', 'History', 'Biography', 'Fantasy', 'Education'].map(category => (\r\n+              <option key={category} value={category}>{category}</option>\r\n+            ))}\r\n+          </select>\r\n+          <select name=\"bookLanguage\" value={formData.bookLanguage} onChange={handleInputChange} required>\r\n+            <option value=\"\" disabled>Select a language</option>\r\n+            {['Swahili', 'Yoruba', 'Zulu', 'Amharic', 'Hausa', 'Somali'].map(language => (\r\n+              <option key={language} value={language}>{language}</option>\r\n+            ))}\r\n+          </select>\r\n+          </div>\r\n+          <div className=\"form-group\">\r\n+            <label htmlFor=\"bookFile\" className=\"label\">Book File</label>\r\n+            <input\r\n+              type=\"file\"\r\n+              name=\"bookFile\"\r\n+              accept=\".pdf, .epub\"\r\n+              className=\"input-text\"\r\n+              onChange={handleInputChange}\r\n+            />\r\n+          </div>\r\n+          <div className=\"form-group\">\r\n+            <button type=\"submit\" className=\"btn-submit\" disabled={loading}>\r\n+              {loading ? 'Updating...' : 'Update'}\r\n+            </button>\r\n+          </div>\r\n+        </form>\r\n+      </div>\r\n+      <Footer />\r\n+    </div>\r\n+  );\r\n+};\r\n+\r\n+export default UpdateBook;\r\n+\r\n+async function uploadToCloudinary(file) {\r\n+  const formData = new FormData();\r\n+  formData.append('file', file);\r\n+  formData.append('upload_preset', 'your_preset_here');\r\n+  const response = await fetch('https://api.cloudinary.com/v1_1/your_cloud_name/upload', {\r\n+    method: 'POST',\r\n+    body: formData,\r\n+  });\r\n+  const data = await response.json();\r\n+  return data.secure_url;\r\n+}\r\n+\r\n"
                },
                {
                    "date": 1741765809460,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,138 @@\n+import { useMutation } from '@apollo/client';\r\n+import { useParams, useNavigate } from \"react-router-dom\";\r\n+import { useState } from 'react';\r\n+import Navbar from '../layout/Navbar.jsx';\r\n+import Footer from '../layout/Footer.jsx';\r\n+import { UPDATEBOOK } from '../graphql/mutations.js';\r\n+\r\n+const UpdateBook = () => {\r\n+  const { bookId } = useParams();\r\n+  const navigate = useNavigate();\r\n+  const [formData, setFormData] = useState({\r\n+    bookCover: null,\r\n+    bookName: '',\r\n+    bookDescription: '',\r\n+    bookAuthor: '',\r\n+    bookCategory: '',\r\n+    bookLanguage: '',\r\n+    bookFile: null,\r\n+  });\r\n+\r\n+  const [updateBook, { loading, error }] = useMutation(UPDATEBOOK);\r\n+\r\n+  const handleInputChange = (e) => {\r\n+    const { name, value, files } = e.target;\r\n+    setFormData((prev) => ({\r\n+      ...prev,\r\n+      [name]: files ? files[0] : value,\r\n+    }));\r\n+  };\r\n+\r\n+  const handleUpdate = async (e) => {\r\n+    e.preventDefault();\r\n+    const token = localStorage.getItem('token');\r\n+\r\n+    try {\r\n+      const { data } = await updateBook({\r\n+        variables: {\r\n+          updateBookId: bookId,\r\n+          updatebook: {\r\n+            bookCover: formData.bookCover ? await uploadToCloudinary(formData.bookCover) : null,\r\n+            bookName: formData.bookName,\r\n+            bookDescription: formData.bookDescription,\r\n+            bookAuthor: formData.bookAuthor,\r\n+            bookCategory: formData.bookCategory,\r\n+            bookLanguage: formData.bookLanguage,\r\n+            bookFile: formData.bookFile ? await uploadToCloudinary(formData.bookFile) : null,\r\n+          },\r\n+        },\r\n+        context: {\r\n+          headers: {\r\n+            Authorization: `Bearer ${token}`,\r\n+          },\r\n+        },\r\n+      });\r\n+\r\n+      if (data.updateBook.success) {\r\n+        alert('Book updated successfully!');\r\n+        navigate('/home');\r\n+      } else {\r\n+        alert(data.updateBook.message || 'Failed to update the book.');\r\n+      }\r\n+    } catch (error) {\r\n+      console.error('Error updating book:', error.message);\r\n+      alert('An error occurred while updating the book. Please try again.');\r\n+    }\r\n+  };\r\n+\r\n+  return (\r\n+    <div className=\"container\">\r\n+      <Navbar />\r\n+      <div className=\"form-container\">\r\n+        <h2>Update Book</h2>\r\n+        {error && <p className=\"errorMsg\">{error.message || 'An unexpected error occurred.'}</p>}\r\n+        <form className=\"create\" onSubmit={handleUpdate}>\r\n+          <input type=\"file\" name=\"bookCover\" accept=\".png, .jpg, .jpeg\" onChange={handleInputChange} />\r\n+          <input type=\"text\" name=\"bookName\" value={formData.bookName} onChange={handleInputChange} required />\r\n+          <input type=\"text\" name=\"bookAuthor\" value={formData.bookAuthor} onChange={handleInputChange} required />\r\n+          <textarea name=\"bookDescription\" value={formData.bookDescription} onChange={handleInputChange} required />\r\n+          <select name=\"bookCategory\" value={formData.bookCategory} onChange={handleInputChange} required>\r\n+            <option value=\"\" disabled>Select a category</option>\r\n+            {['Fiction', 'Non-Fiction', 'Science', 'History', 'Biography', 'Fantasy', 'Education'].map(category => (\r\n+              <option key={category} value={category}>{category}</option>\r\n+            ))}\r\n+          </select>\r\n+          </div>\r\n+          <div className=\"form-group\">\r\n+            <label htmlFor=\"bookLanguage\" className=\"label\">Language</label>\r\n+            <select\r\n+              name=\"bookLanguage\"\r\n+              value={formData.bookLanguage}\r\n+              className=\"input-select\"\r\n+              onChange={handleInputChange}\r\n+              required\r\n+            >\r\n+            <option value=\"\" disabled>Select a language</option>\r\n+              {africanLanguages.map((language) => (\r\n+                <option key={language} value={language}>\r\n+                  {language}\r\n+                </option>\r\n+            ))}\r\n+          </select>\r\n+          </div>\r\n+          <div className=\"form-group\">\r\n+            <label htmlFor=\"bookFile\" className=\"label\">Book File</label>\r\n+            <input\r\n+              type=\"file\"\r\n+              name=\"bookFile\"\r\n+              accept=\".pdf, .epub\"\r\n+              className=\"input-text\"\r\n+              onChange={handleInputChange}\r\n+            />\r\n+          </div>\r\n+          <div className=\"form-group\">\r\n+            <button type=\"submit\" className=\"btn-submit\" disabled={loading}>\r\n+              {loading ? 'Updating...' : 'Update'}\r\n+            </button>\r\n+          </div>\r\n+        </form>\r\n+      </div>\r\n+      <Footer />\r\n+    </div>\r\n+  );\r\n+};\r\n+\r\n+export default UpdateBook;\r\n+\r\n+async function uploadToCloudinary(file) {\r\n+  const formData = new FormData();\r\n+  formData.append('file', file);\r\n+  formData.append('upload_preset', 'your_preset_here');\r\n+  const response = await fetch('https://api.cloudinary.com/v1_1/your_cloud_name/upload', {\r\n+    method: 'POST',\r\n+    body: formData,\r\n+  });\r\n+  const data = await response.json();\r\n+  return data.secure_url;\r\n+}\r\n+\r\n"
                },
                {
                    "date": 1741765817764,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,190 @@\n+import { useMutation } from '@apollo/client';\r\n+import { useParams, useNavigate } from \"react-router-dom\";\r\n+import { useState } from 'react';\r\n+import Navbar from '../layout/Navbar.jsx';\r\n+import Footer from '../layout/Footer.jsx';\r\n+import { UPDATEBOOK } from '../graphql/mutations.js';\r\n+\r\n+const UpdateBook = () => {\r\n+  const { bookId } = useParams();\r\n+  const navigate = useNavigate();\r\n+  const [formData, setFormData] = useState({\r\n+    bookCover: null,\r\n+    bookName: '',\r\n+    bookDescription: '',\r\n+    bookAuthor: '',\r\n+    bookCategory: '',\r\n+    bookLanguage: '',\r\n+    bookFile: null,\r\n+  });\r\n+\r\n+  const [updateBook, { loading, error }] = useMutation(UPDATEBOOK);\r\n+\r\n+  const handleInputChange = (e) => {\r\n+    const { name, value, files } = e.target;\r\n+    setFormData((prev) => ({\r\n+      ...prev,\r\n+      [name]: files ? files[0] : value,\r\n+    }));\r\n+  };\r\n+\r\n+  const handleUpdate = async (e) => {\r\n+    e.preventDefault();\r\n+    const token = localStorage.getItem('token');\r\n+\r\n+    try {\r\n+      const { data } = await updateBook({\r\n+        variables: {\r\n+          updateBookId: bookId,\r\n+          updatebook: {\r\n+            bookCover: formData.bookCover ? await uploadToCloudinary(formData.bookCover) : null,\r\n+            bookName: formData.bookName,\r\n+            bookDescription: formData.bookDescription,\r\n+            bookAuthor: formData.bookAuthor,\r\n+            bookCategory: formData.bookCategory,\r\n+            bookLanguage: formData.bookLanguage,\r\n+            bookFile: formData.bookFile ? await uploadToCloudinary(formData.bookFile) : null,\r\n+          },\r\n+        },\r\n+        context: {\r\n+          headers: {\r\n+            Authorization: `Bearer ${token}`,\r\n+          },\r\n+        },\r\n+      });\r\n+\r\n+      if (data.updateBook.success) {\r\n+        alert('Book updated successfully!');\r\n+        navigate('/home');\r\n+      } else {\r\n+        alert(data.updateBook.message || 'Failed to update the book.');\r\n+      }\r\n+    } catch (error) {\r\n+      console.error('Error updating book:', error.message);\r\n+      alert('An error occurred while updating the book. Please try again.');\r\n+    }\r\n+  };\r\n+\r\n+  return (\r\n+    <div className=\"container\">\r\n+      <Navbar />\r\n+      <div className=\"form-container\">\r\n+        <h2>Update Book</h2>\r\n+        {error && (\r\n+          <p className=\"errorMsg\">\r\n+            {error.message || 'An unexpected error occurred.'}\r\n+          </p>\r\n+        )}\r\n+        <form className=\"create\" onSubmit={handleUpdate}>\r\n+          <div className=\"form-group\">\r\n+            <label htmlFor=\"bookCover\" className=\"label\">Book Cover</label>\r\n+            <input\r\n+              type=\"file\"\r\n+              name=\"bookCover\"\r\n+              accept=\".png, .jpg, .jpeg\"\r\n+              className=\"input-text\"\r\n+              onChange={handleInputChange}\r\n+            />\r\n+          </div>\r\n+          <div className=\"form-group\">\r\n+            <label htmlFor=\"bookName\" className=\"label\">Book Name</label>\r\n+            <input\r\n+              type=\"text\"\r\n+              name=\"bookName\"\r\n+              value={formData.bookName}\r\n+              className=\"input-text\"\r\n+              onChange={handleInputChange}\r\n+              required\r\n+            />\r\n+          </div>\r\n+          <div className=\"form-group\">\r\n+            <label htmlFor=\"bookAuthor\" className=\"label\">Author</label>\r\n+            <input\r\n+              type=\"text\"\r\n+              name=\"bookAuthor\"\r\n+              value={formData.bookAuthor}\r\n+              className=\"input-text\"\r\n+              onChange={handleInputChange}\r\n+              required\r\n+            />\r\n+          </div>\r\n+          <div className=\"form-group\">\r\n+            <label htmlFor=\"bookDescription\" className=\"label\">Description</label>\r\n+            <textarea\r\n+              name=\"bookDescription\"\r\n+              value={formData.bookDescription}\r\n+              className=\"input-textarea\"\r\n+              onChange={handleInputChange}\r\n+              required\r\n+            />\r\n+          </div>\r\n+          <div className=\"form-group\">\r\n+            <label htmlFor=\"bookCategory\" className=\"label\">Category</label>\r\n+            <select\r\n+              name=\"bookCategory\"\r\n+              value={formData.bookCategory}\r\n+              className=\"input-select\"\r\n+              onChange={handleInputChange}\r\n+              required\r\n+            >\r\n+            <option value=\"\" disabled>Select a category</option>\r\n+              {categories.map((category) => (\r\n+                <option key={category} value={category}>\r\n+                  {category}\r\n+                </option>\r\n+            ))}\r\n+          </select>\r\n+          </div>\r\n+          <div className=\"form-group\">\r\n+            <label htmlFor=\"bookLanguage\" className=\"label\">Language</label>\r\n+            <select\r\n+              name=\"bookLanguage\"\r\n+              value={formData.bookLanguage}\r\n+              className=\"input-select\"\r\n+              onChange={handleInputChange}\r\n+              required\r\n+            >\r\n+            <option value=\"\" disabled>Select a language</option>\r\n+              {africanLanguages.map((language) => (\r\n+                <option key={language} value={language}>\r\n+                  {language}\r\n+                </option>\r\n+            ))}\r\n+          </select>\r\n+          </div>\r\n+          <div className=\"form-group\">\r\n+            <label htmlFor=\"bookFile\" className=\"label\">Book File</label>\r\n+            <input\r\n+              type=\"file\"\r\n+              name=\"bookFile\"\r\n+              accept=\".pdf, .epub\"\r\n+              className=\"input-text\"\r\n+              onChange={handleInputChange}\r\n+            />\r\n+          </div>\r\n+          <div className=\"form-group\">\r\n+            <button type=\"submit\" className=\"btn-submit\" disabled={loading}>\r\n+              {loading ? 'Updating...' : 'Update'}\r\n+            </button>\r\n+          </div>\r\n+        </form>\r\n+      </div>\r\n+      <Footer />\r\n+    </div>\r\n+  );\r\n+};\r\n+\r\n+export default UpdateBook;\r\n+\r\n+async function uploadToCloudinary(file) {\r\n+  const formData = new FormData();\r\n+  formData.append('file', file);\r\n+  formData.append('upload_preset', 'your_preset_here');\r\n+  const response = await fetch('https://api.cloudinary.com/v1_1/your_cloud_name/upload', {\r\n+    method: 'POST',\r\n+    body: formData,\r\n+  });\r\n+  const data = await response.json();\r\n+  return data.secure_url;\r\n+}\r\n+\r\n"
                },
                {
                    "date": 1741765836733,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -36,9 +36,9 @@\n       const { data } = await updateBook({\r\n         variables: {\r\n           updateBookId: bookId,\r\n           updatebook: {\r\n-            bookCover: formData.bookCover ? await uploadToCloudinary(formData.bookCover) : null,\r\n+            bookCover,\r\n             bookName: formData.bookName,\r\n             bookDescription: formData.bookDescription,\r\n             bookAuthor: formData.bookAuthor,\r\n             bookCategory: formData.bookCategory,\r\n"
                },
                {
                    "date": 1741765842064,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,215 @@\n+import { useMutation } from '@apollo/client';\r\n+import { useParams, useNavigate } from \"react-router-dom\";\r\n+import { useState } from 'react';\r\n+import Navbar from '../layout/Navbar.jsx';\r\n+import Footer from '../layout/Footer.jsx';\r\n+import { UPDATEBOOK } from '../graphql/mutations.js';\r\n+\r\n+const UpdateBook = () => {\r\n+  const { bookId } = useParams();\r\n+  const navigate = useNavigate();\r\n+  const [formData, setFormData] = useState({\r\n+    bookCover: null,\r\n+    bookName: '',\r\n+    bookDescription: '',\r\n+    bookAuthor: '',\r\n+    bookCategory: '',\r\n+    bookLanguage: '',\r\n+    bookFile: null,\r\n+  });\r\n+\r\n+  const [updateBook, { loading, error }] = useMutation(UPDATEBOOK);\r\n+\r\n+  const handleInputChange = (e) => {\r\n+    const { name, value, files } = e.target;\r\n+    setFormData((prev) => ({\r\n+      ...prev,\r\n+      [name]: files ? files[0] : value,\r\n+    }));\r\n+  };\r\n+\r\n+  const handleUpdate = async (e) => {\r\n+    e.preventDefault();\r\n+    const token = localStorage.getItem('token');\r\n+\r\n+    try {\r\n+      const { data } = await updateBook({\r\n+        variables: {\r\n+          updateBookId: bookId,\r\n+          updatebook: {\r\n+            bookCover,\r\n+            bookName: formData.bookName,\r\n+            bookDescription: formData.bookDescription,\r\n+            bookAuthor: formData.bookAuthor,\r\n+            bookCategory: formData.bookCategory,\r\n+            bookLanguage: formData.bookLanguage,\r\n+            bookFile,\r\n+          },\r\n+        },\r\n+        context: {\r\n+          headers: {\r\n+            Authorization: 'Bearer '+token,\r\n+          },\r\n+        },\r\n+      });\r\n+\r\n+      if (data.updateBook.success) {\r\n+        alert('Book updated successfully!');\r\n+        navigate('/home');\r\n+      } else {\r\n+        alert(data.updateBook.message || 'Failed to update the book.');\r\n+      }\r\n+    } catch (error) {\r\n+      console.error('Error updating book:', error.message);\r\n+      alert('An error occurred while updating the book. Please try again.');\r\n+    }\r\n+  };\r\n+  const categories = [\r\n+    'Fiction',\r\n+    'Non-Fiction',\r\n+    'Science',\r\n+    'History',\r\n+    'Biography',\r\n+    'Fantasy',\r\n+    'Education',\r\n+  ];\r\n+\r\n+  const africanLanguages = [\r\n+    'Swahili',\r\n+    'Yoruba',\r\n+    'Zulu',\r\n+    'Amharic',\r\n+    'Hausa',\r\n+    'Somali',\r\n+    'Shona',\r\n+    'Oromo',\r\n+    'Fulbe',\r\n+    'Wollof',\r\n+    'Xhosa',\r\n+    'Afar',\r\n+    'Akan',\r\n+  ];\r\n+\r\n+  return (\r\n+    <div className=\"container\">\r\n+      <Navbar />\r\n+      <div className=\"form-container\">\r\n+        <h2>Update Book</h2>\r\n+        {error && (\r\n+          <p className=\"errorMsg\">\r\n+            {error.message || 'An unexpected error occurred.'}\r\n+          </p>\r\n+        )}\r\n+        <form className=\"create\" onSubmit={handleUpdate}>\r\n+          <div className=\"form-group\">\r\n+            <label htmlFor=\"bookCover\" className=\"label\">Book Cover</label>\r\n+            <input\r\n+              type=\"file\"\r\n+              name=\"bookCover\"\r\n+              accept=\".png, .jpg, .jpeg\"\r\n+              className=\"input-text\"\r\n+              onChange={handleInputChange}\r\n+            />\r\n+          </div>\r\n+          <div className=\"form-group\">\r\n+            <label htmlFor=\"bookName\" className=\"label\">Book Name</label>\r\n+            <input\r\n+              type=\"text\"\r\n+              name=\"bookName\"\r\n+              value={formData.bookName}\r\n+              className=\"input-text\"\r\n+              onChange={handleInputChange}\r\n+              required\r\n+            />\r\n+          </div>\r\n+          <div className=\"form-group\">\r\n+            <label htmlFor=\"bookAuthor\" className=\"label\">Author</label>\r\n+            <input\r\n+              type=\"text\"\r\n+              name=\"bookAuthor\"\r\n+              value={formData.bookAuthor}\r\n+              className=\"input-text\"\r\n+              onChange={handleInputChange}\r\n+              required\r\n+            />\r\n+          </div>\r\n+          <div className=\"form-group\">\r\n+            <label htmlFor=\"bookDescription\" className=\"label\">Description</label>\r\n+            <textarea\r\n+              name=\"bookDescription\"\r\n+              value={formData.bookDescription}\r\n+              className=\"input-textarea\"\r\n+              onChange={handleInputChange}\r\n+              required\r\n+            />\r\n+          </div>\r\n+          <div className=\"form-group\">\r\n+            <label htmlFor=\"bookCategory\" className=\"label\">Category</label>\r\n+            <select\r\n+              name=\"bookCategory\"\r\n+              value={formData.bookCategory}\r\n+              className=\"input-select\"\r\n+              onChange={handleInputChange}\r\n+              required\r\n+            >\r\n+            <option value=\"\" disabled>Select a category</option>\r\n+              {categories.map((category) => (\r\n+                <option key={category} value={category}>\r\n+                  {category}\r\n+                </option>\r\n+            ))}\r\n+          </select>\r\n+          </div>\r\n+          <div className=\"form-group\">\r\n+            <label htmlFor=\"bookLanguage\" className=\"label\">Language</label>\r\n+            <select\r\n+              name=\"bookLanguage\"\r\n+              value={formData.bookLanguage}\r\n+              className=\"input-select\"\r\n+              onChange={handleInputChange}\r\n+              required\r\n+            >\r\n+            <option value=\"\" disabled>Select a language</option>\r\n+              {africanLanguages.map((language) => (\r\n+                <option key={language} value={language}>\r\n+                  {language}\r\n+                </option>\r\n+            ))}\r\n+          </select>\r\n+          </div>\r\n+          <div className=\"form-group\">\r\n+            <label htmlFor=\"bookFile\" className=\"label\">Book File</label>\r\n+            <input\r\n+              type=\"file\"\r\n+              name=\"bookFile\"\r\n+              accept=\".pdf, .epub\"\r\n+              className=\"input-text\"\r\n+              onChange={handleInputChange}\r\n+            />\r\n+          </div>\r\n+          <div className=\"form-group\">\r\n+            <button type=\"submit\" className=\"btn-submit\" disabled={loading}>\r\n+              {loading ? 'Updating...' : 'Update'}\r\n+            </button>\r\n+          </div>\r\n+        </form>\r\n+      </div>\r\n+      <Footer />\r\n+    </div>\r\n+  );\r\n+};\r\n+\r\n+export default UpdateBook;\r\n+\r\n+async function uploadToCloudinary(file) {\r\n+  const formData = new FormData();\r\n+  formData.append('file', file);\r\n+  formData.append('upload_preset', 'your_preset_here');\r\n+  const response = await fetch('https://api.cloudinary.com/v1_1/your_cloud_name/upload', {\r\n+    method: 'POST',\r\n+    body: formData,\r\n+  });\r\n+  const data = await response.json();\r\n+  return data.secure_url;\r\n+}\r\n+\r\n"
                },
                {
                    "date": 1741765853675,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,217 @@\n+import { useMutation } from '@apollo/client';\r\n+import { useParams, useNavigate } from \"react-router-dom\";\r\n+import { useState } from 'react';\r\n+import Navbar from '../layout/Navbar.jsx';\r\n+import Footer from '../layout/Footer.jsx';\r\n+import { UPDATEBOOK } from '../graphql/mutations.js';\r\n+\r\n+const UpdateBook = () => {\r\n+  const { bookId } = useParams();\r\n+  const navigate = useNavigate();\r\n+  const [formData, setFormData] = useState({\r\n+    bookCover: null,\r\n+    bookName: '',\r\n+    bookDescription: '',\r\n+    bookAuthor: '',\r\n+    bookCategory: '',\r\n+    bookLanguage: '',\r\n+    bookFile: null,\r\n+  });\r\n+\r\n+  const [updateBook, { loading, error }] = useMutation(UPDATEBOOK);\r\n+\r\n+  const handleInputChange = (e) => {\r\n+    const { name, value, files } = e.target;\r\n+    setFormData((prev) => ({\r\n+      ...prev,\r\n+      [name]: files ? files[0] : value,\r\n+    }));\r\n+  };\r\n+\r\n+  const handleUpdate = async (e) => {\r\n+    e.preventDefault();\r\n+    const token = localStorage.getItem('token');\r\n+    const bookCover = await handleFileUpload(formData.bookCover);\r\n+    const bookFile = await handleFileUpload(formData.bookFile);\r\n+\r\n+    try {\r\n+      const { data } = await updateBook({\r\n+        variables: {\r\n+          updateBookId: bookId,\r\n+          updatebook: {\r\n+            bookCover,\r\n+            bookName: formData.bookName,\r\n+            bookDescription: formData.bookDescription,\r\n+            bookAuthor: formData.bookAuthor,\r\n+            bookCategory: formData.bookCategory,\r\n+            bookLanguage: formData.bookLanguage,\r\n+            bookFile,\r\n+          },\r\n+        },\r\n+        context: {\r\n+          headers: {\r\n+            Authorization: 'Bearer '+token,\r\n+          },\r\n+        },\r\n+      });\r\n+\r\n+      if (data.updateBook.success) {\r\n+        alert('Book updated successfully!');\r\n+        navigate('/home');\r\n+      } else {\r\n+        alert(data.updateBook.message || 'Failed to update the book.');\r\n+      }\r\n+    } catch (error) {\r\n+      console.error('Error updating book:', error.message);\r\n+      alert('An error occurred while updating the book. Please try again.');\r\n+    }\r\n+  };\r\n+  const categories = [\r\n+    'Fiction',\r\n+    'Non-Fiction',\r\n+    'Science',\r\n+    'History',\r\n+    'Biography',\r\n+    'Fantasy',\r\n+    'Education',\r\n+  ];\r\n+\r\n+  const africanLanguages = [\r\n+    'Swahili',\r\n+    'Yoruba',\r\n+    'Zulu',\r\n+    'Amharic',\r\n+    'Hausa',\r\n+    'Somali',\r\n+    'Shona',\r\n+    'Oromo',\r\n+    'Fulbe',\r\n+    'Wollof',\r\n+    'Xhosa',\r\n+    'Afar',\r\n+    'Akan',\r\n+  ];\r\n+\r\n+  return (\r\n+    <div className=\"container\">\r\n+      <Navbar />\r\n+      <div className=\"form-container\">\r\n+        <h2>Update Book</h2>\r\n+        {error && (\r\n+          <p className=\"errorMsg\">\r\n+            {error.message || 'An unexpected error occurred.'}\r\n+          </p>\r\n+        )}\r\n+        <form className=\"create\" onSubmit={handleUpdate}>\r\n+          <div className=\"form-group\">\r\n+            <label htmlFor=\"bookCover\" className=\"label\">Book Cover</label>\r\n+            <input\r\n+              type=\"file\"\r\n+              name=\"bookCover\"\r\n+              accept=\".png, .jpg, .jpeg\"\r\n+              className=\"input-text\"\r\n+              onChange={handleInputChange}\r\n+            />\r\n+          </div>\r\n+          <div className=\"form-group\">\r\n+            <label htmlFor=\"bookName\" className=\"label\">Book Name</label>\r\n+            <input\r\n+              type=\"text\"\r\n+              name=\"bookName\"\r\n+              value={formData.bookName}\r\n+              className=\"input-text\"\r\n+              onChange={handleInputChange}\r\n+              required\r\n+            />\r\n+          </div>\r\n+          <div className=\"form-group\">\r\n+            <label htmlFor=\"bookAuthor\" className=\"label\">Author</label>\r\n+            <input\r\n+              type=\"text\"\r\n+              name=\"bookAuthor\"\r\n+              value={formData.bookAuthor}\r\n+              className=\"input-text\"\r\n+              onChange={handleInputChange}\r\n+              required\r\n+            />\r\n+          </div>\r\n+          <div className=\"form-group\">\r\n+            <label htmlFor=\"bookDescription\" className=\"label\">Description</label>\r\n+            <textarea\r\n+              name=\"bookDescription\"\r\n+              value={formData.bookDescription}\r\n+              className=\"input-textarea\"\r\n+              onChange={handleInputChange}\r\n+              required\r\n+            />\r\n+          </div>\r\n+          <div className=\"form-group\">\r\n+            <label htmlFor=\"bookCategory\" className=\"label\">Category</label>\r\n+            <select\r\n+              name=\"bookCategory\"\r\n+              value={formData.bookCategory}\r\n+              className=\"input-select\"\r\n+              onChange={handleInputChange}\r\n+              required\r\n+            >\r\n+            <option value=\"\" disabled>Select a category</option>\r\n+              {categories.map((category) => (\r\n+                <option key={category} value={category}>\r\n+                  {category}\r\n+                </option>\r\n+            ))}\r\n+          </select>\r\n+          </div>\r\n+          <div className=\"form-group\">\r\n+            <label htmlFor=\"bookLanguage\" className=\"label\">Language</label>\r\n+            <select\r\n+              name=\"bookLanguage\"\r\n+              value={formData.bookLanguage}\r\n+              className=\"input-select\"\r\n+              onChange={handleInputChange}\r\n+              required\r\n+            >\r\n+            <option value=\"\" disabled>Select a language</option>\r\n+              {africanLanguages.map((language) => (\r\n+                <option key={language} value={language}>\r\n+                  {language}\r\n+                </option>\r\n+            ))}\r\n+          </select>\r\n+          </div>\r\n+          <div className=\"form-group\">\r\n+            <label htmlFor=\"bookFile\" className=\"label\">Book File</label>\r\n+            <input\r\n+              type=\"file\"\r\n+              name=\"bookFile\"\r\n+              accept=\".pdf, .epub\"\r\n+              className=\"input-text\"\r\n+              onChange={handleInputChange}\r\n+            />\r\n+          </div>\r\n+          <div className=\"form-group\">\r\n+            <button type=\"submit\" className=\"btn-submit\" disabled={loading}>\r\n+              {loading ? 'Updating...' : 'Update'}\r\n+            </button>\r\n+          </div>\r\n+        </form>\r\n+      </div>\r\n+      <Footer />\r\n+    </div>\r\n+  );\r\n+};\r\n+\r\n+export default UpdateBook;\r\n+\r\n+async function uploadToCloudinary(file) {\r\n+  const formData = new FormData();\r\n+  formData.append('file', file);\r\n+  formData.append('upload_preset', 'your_preset_here');\r\n+  const response = await fetch('https://api.cloudinary.com/v1_1/your_cloud_name/upload', {\r\n+    method: 'POST',\r\n+    body: formData,\r\n+  });\r\n+  const data = await response.json();\r\n+  return data.secure_url;\r\n+}\r\n+\r\n"
                },
                {
                    "date": 1741765864395,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -27,8 +27,13 @@\n       [name]: files ? files[0] : value,\r\n     }));\r\n   };\r\n \r\n+  const handleFileUpload = async (file) => {\r\n+    if (!file) return null;\r\n+    return file.name; \r\n+  };\r\n+\r\n   const handleUpdate = async (e) => {\r\n     e.preventDefault();\r\n     const token = localStorage.getItem('token');\r\n     const bookCover = await handleFileUpload(formData.bookCover);\r\n@@ -214,675 +219,4 @@\n   const data = await response.json();\r\n   return data.secure_url;\r\n }\r\n \r\n-import { useMutation } from '@apollo/client';\r\n-import { useParams, useNavigate } from \"react-router-dom\";\r\n-import { useState } from 'react';\r\n-import Navbar from '../layout/Navbar.jsx';\r\n-import Footer from '../layout/Footer.jsx';\r\n-import { UPDATEBOOK } from '../graphql/mutations.js';\r\n-\r\n-const UpdateBook = () => {\r\n-  const { bookId } = useParams();\r\n-  const navigate = useNavigate();\r\n-  const [formData, setFormData] = useState({\r\n-    bookCover: null,\r\n-    bookName: '',\r\n-    bookDescription: '',\r\n-    bookAuthor: '',\r\n-    bookCategory: '',\r\n-    bookLanguage: '',\r\n-    bookFile: null,\r\n-  });\r\n-\r\n-  const [updateBook, { loading, error }] = useMutation(UPDATEBOOK);\r\n-\r\n-  const handleInputChange = (e) => {\r\n-    const { name, value, files } = e.target;\r\n-    setFormData((prev) => ({\r\n-      ...prev,\r\n-      [name]: files ? files[0] : value,\r\n-    }));\r\n-  };\r\n-\r\n-  const handleUpdate = async (e) => {\r\n-    e.preventDefault();\r\n-    const token = localStorage.getItem('token');\r\n-\r\n-    try {\r\n-      const { data } = await updateBook({\r\n-        variables: {\r\n-          updateBookId: bookId,\r\n-          updatebook: {\r\n-            bookCover,\r\n-            bookName: formData.bookName,\r\n-            bookDescription: formData.bookDescription,\r\n-            bookAuthor: formData.bookAuthor,\r\n-            bookCategory: formData.bookCategory,\r\n-            bookLanguage: formData.bookLanguage,\r\n-            bookFile,\r\n-          },\r\n-        },\r\n-        context: {\r\n-          headers: {\r\n-            Authorization: 'Bearer '+token,\r\n-          },\r\n-        },\r\n-      });\r\n-\r\n-      if (data.updateBook.success) {\r\n-        alert('Book updated successfully!');\r\n-        navigate('/home');\r\n-      } else {\r\n-        alert(data.updateBook.message || 'Failed to update the book.');\r\n-      }\r\n-    } catch (error) {\r\n-      console.error('Error updating book:', error.message);\r\n-      alert('An error occurred while updating the book. Please try again.');\r\n-    }\r\n-  };\r\n-  const categories = [\r\n-    'Fiction',\r\n-    'Non-Fiction',\r\n-    'Science',\r\n-    'History',\r\n-    'Biography',\r\n-    'Fantasy',\r\n-    'Education',\r\n-  ];\r\n-\r\n-  const africanLanguages = [\r\n-    'Swahili',\r\n-    'Yoruba',\r\n-    'Zulu',\r\n-    'Amharic',\r\n-    'Hausa',\r\n-    'Somali',\r\n-    'Shona',\r\n-    'Oromo',\r\n-    'Fulbe',\r\n-    'Wollof',\r\n-    'Xhosa',\r\n-    'Afar',\r\n-    'Akan',\r\n-  ];\r\n-\r\n-  return (\r\n-    <div className=\"container\">\r\n-      <Navbar />\r\n-      <div className=\"form-container\">\r\n-        <h2>Update Book</h2>\r\n-        {error && (\r\n-          <p className=\"errorMsg\">\r\n-            {error.message || 'An unexpected error occurred.'}\r\n-          </p>\r\n-        )}\r\n-        <form className=\"create\" onSubmit={handleUpdate}>\r\n-          <div className=\"form-group\">\r\n-            <label htmlFor=\"bookCover\" className=\"label\">Book Cover</label>\r\n-            <input\r\n-              type=\"file\"\r\n-              name=\"bookCover\"\r\n-              accept=\".png, .jpg, .jpeg\"\r\n-              className=\"input-text\"\r\n-              onChange={handleInputChange}\r\n-            />\r\n-          </div>\r\n-          <div className=\"form-group\">\r\n-            <label htmlFor=\"bookName\" className=\"label\">Book Name</label>\r\n-            <input\r\n-              type=\"text\"\r\n-              name=\"bookName\"\r\n-              value={formData.bookName}\r\n-              className=\"input-text\"\r\n-              onChange={handleInputChange}\r\n-              required\r\n-            />\r\n-          </div>\r\n-          <div className=\"form-group\">\r\n-            <label htmlFor=\"bookAuthor\" className=\"label\">Author</label>\r\n-            <input\r\n-              type=\"text\"\r\n-              name=\"bookAuthor\"\r\n-              value={formData.bookAuthor}\r\n-              className=\"input-text\"\r\n-              onChange={handleInputChange}\r\n-              required\r\n-            />\r\n-          </div>\r\n-          <div className=\"form-group\">\r\n-            <label htmlFor=\"bookDescription\" className=\"label\">Description</label>\r\n-            <textarea\r\n-              name=\"bookDescription\"\r\n-              value={formData.bookDescription}\r\n-              className=\"input-textarea\"\r\n-              onChange={handleInputChange}\r\n-              required\r\n-            />\r\n-          </div>\r\n-          <div className=\"form-group\">\r\n-            <label htmlFor=\"bookCategory\" className=\"label\">Category</label>\r\n-            <select\r\n-              name=\"bookCategory\"\r\n-              value={formData.bookCategory}\r\n-              className=\"input-select\"\r\n-              onChange={handleInputChange}\r\n-              required\r\n-            >\r\n-            <option value=\"\" disabled>Select a category</option>\r\n-              {categories.map((category) => (\r\n-                <option key={category} value={category}>\r\n-                  {category}\r\n-                </option>\r\n-            ))}\r\n-          </select>\r\n-          </div>\r\n-          <div className=\"form-group\">\r\n-            <label htmlFor=\"bookLanguage\" className=\"label\">Language</label>\r\n-            <select\r\n-              name=\"bookLanguage\"\r\n-              value={formData.bookLanguage}\r\n-              className=\"input-select\"\r\n-              onChange={handleInputChange}\r\n-              required\r\n-            >\r\n-            <option value=\"\" disabled>Select a language</option>\r\n-              {africanLanguages.map((language) => (\r\n-                <option key={language} value={language}>\r\n-                  {language}\r\n-                </option>\r\n-            ))}\r\n-          </select>\r\n-          </div>\r\n-          <div className=\"form-group\">\r\n-            <label htmlFor=\"bookFile\" className=\"label\">Book File</label>\r\n-            <input\r\n-              type=\"file\"\r\n-              name=\"bookFile\"\r\n-              accept=\".pdf, .epub\"\r\n-              className=\"input-text\"\r\n-              onChange={handleInputChange}\r\n-            />\r\n-          </div>\r\n-          <div className=\"form-group\">\r\n-            <button type=\"submit\" className=\"btn-submit\" disabled={loading}>\r\n-              {loading ? 'Updating...' : 'Update'}\r\n-            </button>\r\n-          </div>\r\n-        </form>\r\n-      </div>\r\n-      <Footer />\r\n-    </div>\r\n-  );\r\n-};\r\n-\r\n-export default UpdateBook;\r\n-\r\n-async function uploadToCloudinary(file) {\r\n-  const formData = new FormData();\r\n-  formData.append('file', file);\r\n-  formData.append('upload_preset', 'your_preset_here');\r\n-  const response = await fetch('https://api.cloudinary.com/v1_1/your_cloud_name/upload', {\r\n-    method: 'POST',\r\n-    body: formData,\r\n-  });\r\n-  const data = await response.json();\r\n-  return data.secure_url;\r\n-}\r\n-\r\n-import { useMutation } from '@apollo/client';\r\n-import { useParams, useNavigate } from \"react-router-dom\";\r\n-import { useState } from 'react';\r\n-import Navbar from '../layout/Navbar.jsx';\r\n-import Footer from '../layout/Footer.jsx';\r\n-import { UPDATEBOOK } from '../graphql/mutations.js';\r\n-\r\n-const UpdateBook = () => {\r\n-  const { bookId } = useParams();\r\n-  const navigate = useNavigate();\r\n-  const [formData, setFormData] = useState({\r\n-    bookCover: null,\r\n-    bookName: '',\r\n-    bookDescription: '',\r\n-    bookAuthor: '',\r\n-    bookCategory: '',\r\n-    bookLanguage: '',\r\n-    bookFile: null,\r\n-  });\r\n-\r\n-  const [updateBook, { loading, error }] = useMutation(UPDATEBOOK);\r\n-\r\n-  const handleInputChange = (e) => {\r\n-    const { name, value, files } = e.target;\r\n-    setFormData((prev) => ({\r\n-      ...prev,\r\n-      [name]: files ? files[0] : value,\r\n-    }));\r\n-  };\r\n-\r\n-  const handleUpdate = async (e) => {\r\n-    e.preventDefault();\r\n-    const token = localStorage.getItem('token');\r\n-\r\n-    try {\r\n-      const { data } = await updateBook({\r\n-        variables: {\r\n-          updateBookId: bookId,\r\n-          updatebook: {\r\n-            bookCover,\r\n-            bookName: formData.bookName,\r\n-            bookDescription: formData.bookDescription,\r\n-            bookAuthor: formData.bookAuthor,\r\n-            bookCategory: formData.bookCategory,\r\n-            bookLanguage: formData.bookLanguage,\r\n-            bookFile: formData.bookFile ? await uploadToCloudinary(formData.bookFile) : null,\r\n-          },\r\n-        },\r\n-        context: {\r\n-          headers: {\r\n-            Authorization: `Bearer ${token}`,\r\n-          },\r\n-        },\r\n-      });\r\n-\r\n-      if (data.updateBook.success) {\r\n-        alert('Book updated successfully!');\r\n-        navigate('/home');\r\n-      } else {\r\n-        alert(data.updateBook.message || 'Failed to update the book.');\r\n-      }\r\n-    } catch (error) {\r\n-      console.error('Error updating book:', error.message);\r\n-      alert('An error occurred while updating the book. Please try again.');\r\n-    }\r\n-  };\r\n-\r\n-  return (\r\n-    <div className=\"container\">\r\n-      <Navbar />\r\n-      <div className=\"form-container\">\r\n-        <h2>Update Book</h2>\r\n-        {error && (\r\n-          <p className=\"errorMsg\">\r\n-            {error.message || 'An unexpected error occurred.'}\r\n-          </p>\r\n-        )}\r\n-        <form className=\"create\" onSubmit={handleUpdate}>\r\n-          <div className=\"form-group\">\r\n-            <label htmlFor=\"bookCover\" className=\"label\">Book Cover</label>\r\n-            <input\r\n-              type=\"file\"\r\n-              name=\"bookCover\"\r\n-              accept=\".png, .jpg, .jpeg\"\r\n-              className=\"input-text\"\r\n-              onChange={handleInputChange}\r\n-            />\r\n-          </div>\r\n-          <div className=\"form-group\">\r\n-            <label htmlFor=\"bookName\" className=\"label\">Book Name</label>\r\n-            <input\r\n-              type=\"text\"\r\n-              name=\"bookName\"\r\n-              value={formData.bookName}\r\n-              className=\"input-text\"\r\n-              onChange={handleInputChange}\r\n-              required\r\n-            />\r\n-          </div>\r\n-          <div className=\"form-group\">\r\n-            <label htmlFor=\"bookAuthor\" className=\"label\">Author</label>\r\n-            <input\r\n-              type=\"text\"\r\n-              name=\"bookAuthor\"\r\n-              value={formData.bookAuthor}\r\n-              className=\"input-text\"\r\n-              onChange={handleInputChange}\r\n-              required\r\n-            />\r\n-          </div>\r\n-          <div className=\"form-group\">\r\n-            <label htmlFor=\"bookDescription\" className=\"label\">Description</label>\r\n-            <textarea\r\n-              name=\"bookDescription\"\r\n-              value={formData.bookDescription}\r\n-              className=\"input-textarea\"\r\n-              onChange={handleInputChange}\r\n-              required\r\n-            />\r\n-          </div>\r\n-          <div className=\"form-group\">\r\n-            <label htmlFor=\"bookCategory\" className=\"label\">Category</label>\r\n-            <select\r\n-              name=\"bookCategory\"\r\n-              value={formData.bookCategory}\r\n-              className=\"input-select\"\r\n-              onChange={handleInputChange}\r\n-              required\r\n-            >\r\n-            <option value=\"\" disabled>Select a category</option>\r\n-              {categories.map((category) => (\r\n-                <option key={category} value={category}>\r\n-                  {category}\r\n-                </option>\r\n-            ))}\r\n-          </select>\r\n-          </div>\r\n-          <div className=\"form-group\">\r\n-            <label htmlFor=\"bookLanguage\" className=\"label\">Language</label>\r\n-            <select\r\n-              name=\"bookLanguage\"\r\n-              value={formData.bookLanguage}\r\n-              className=\"input-select\"\r\n-              onChange={handleInputChange}\r\n-              required\r\n-            >\r\n-            <option value=\"\" disabled>Select a language</option>\r\n-              {africanLanguages.map((language) => (\r\n-                <option key={language} value={language}>\r\n-                  {language}\r\n-                </option>\r\n-            ))}\r\n-          </select>\r\n-          </div>\r\n-          <div className=\"form-group\">\r\n-            <label htmlFor=\"bookFile\" className=\"label\">Book File</label>\r\n-            <input\r\n-              type=\"file\"\r\n-              name=\"bookFile\"\r\n-              accept=\".pdf, .epub\"\r\n-              className=\"input-text\"\r\n-              onChange={handleInputChange}\r\n-            />\r\n-          </div>\r\n-          <div className=\"form-group\">\r\n-            <button type=\"submit\" className=\"btn-submit\" disabled={loading}>\r\n-              {loading ? 'Updating...' : 'Update'}\r\n-            </button>\r\n-          </div>\r\n-        </form>\r\n-      </div>\r\n-      <Footer />\r\n-    </div>\r\n-  );\r\n-};\r\n-\r\n-export default UpdateBook;\r\n-\r\n-async function uploadToCloudinary(file) {\r\n-  const formData = new FormData();\r\n-  formData.append('file', file);\r\n-  formData.append('upload_preset', 'your_preset_here');\r\n-  const response = await fetch('https://api.cloudinary.com/v1_1/your_cloud_name/upload', {\r\n-    method: 'POST',\r\n-    body: formData,\r\n-  });\r\n-  const data = await response.json();\r\n-  return data.secure_url;\r\n-}\r\n-\r\n-import { useMutation } from '@apollo/client';\r\n-import { useParams, useNavigate } from \"react-router-dom\";\r\n-import { useState } from 'react';\r\n-import Navbar from '../layout/Navbar.jsx';\r\n-import Footer from '../layout/Footer.jsx';\r\n-import { UPDATEBOOK } from '../graphql/mutations.js';\r\n-\r\n-const UpdateBook = () => {\r\n-  const { bookId } = useParams();\r\n-  const navigate = useNavigate();\r\n-  const [formData, setFormData] = useState({\r\n-    bookCover: null,\r\n-    bookName: '',\r\n-    bookDescription: '',\r\n-    bookAuthor: '',\r\n-    bookCategory: '',\r\n-    bookLanguage: '',\r\n-    bookFile: null,\r\n-  });\r\n-\r\n-  const [updateBook, { loading, error }] = useMutation(UPDATEBOOK);\r\n-\r\n-  const handleInputChange = (e) => {\r\n-    const { name, value, files } = e.target;\r\n-    setFormData((prev) => ({\r\n-      ...prev,\r\n-      [name]: files ? files[0] : value,\r\n-    }));\r\n-  };\r\n-\r\n-  const handleUpdate = async (e) => {\r\n-    e.preventDefault();\r\n-    const token = localStorage.getItem('token');\r\n-\r\n-    try {\r\n-      const { data } = await updateBook({\r\n-        variables: {\r\n-          updateBookId: bookId,\r\n-          updatebook: {\r\n-            bookCover: formData.bookCover ? await uploadToCloudinary(formData.bookCover) : null,\r\n-            bookName: formData.bookName,\r\n-            bookDescription: formData.bookDescription,\r\n-            bookAuthor: formData.bookAuthor,\r\n-            bookCategory: formData.bookCategory,\r\n-            bookLanguage: formData.bookLanguage,\r\n-            bookFile: formData.bookFile ? await uploadToCloudinary(formData.bookFile) : null,\r\n-          },\r\n-        },\r\n-        context: {\r\n-          headers: {\r\n-            Authorization: `Bearer ${token}`,\r\n-          },\r\n-        },\r\n-      });\r\n-\r\n-      if (data.updateBook.success) {\r\n-        alert('Book updated successfully!');\r\n-        navigate('/home');\r\n-      } else {\r\n-        alert(data.updateBook.message || 'Failed to update the book.');\r\n-      }\r\n-    } catch (error) {\r\n-      console.error('Error updating book:', error.message);\r\n-      alert('An error occurred while updating the book. Please try again.');\r\n-    }\r\n-  };\r\n-\r\n-  return (\r\n-    <div className=\"container\">\r\n-      <Navbar />\r\n-      <div className=\"form-container\">\r\n-        <h2>Update Book</h2>\r\n-        {error && <p className=\"errorMsg\">{error.message || 'An unexpected error occurred.'}</p>}\r\n-        <form className=\"create\" onSubmit={handleUpdate}>\r\n-          <input type=\"file\" name=\"bookCover\" accept=\".png, .jpg, .jpeg\" onChange={handleInputChange} />\r\n-          <input type=\"text\" name=\"bookName\" value={formData.bookName} onChange={handleInputChange} required />\r\n-          <input type=\"text\" name=\"bookAuthor\" value={formData.bookAuthor} onChange={handleInputChange} required />\r\n-          <textarea name=\"bookDescription\" value={formData.bookDescription} onChange={handleInputChange} required />\r\n-          <select name=\"bookCategory\" value={formData.bookCategory} onChange={handleInputChange} required>\r\n-            <option value=\"\" disabled>Select a category</option>\r\n-            {['Fiction', 'Non-Fiction', 'Science', 'History', 'Biography', 'Fantasy', 'Education'].map(category => (\r\n-              <option key={category} value={category}>{category}</option>\r\n-            ))}\r\n-          </select>\r\n-          </div>\r\n-          <div className=\"form-group\">\r\n-            <label htmlFor=\"bookLanguage\" className=\"label\">Language</label>\r\n-            <select\r\n-              name=\"bookLanguage\"\r\n-              value={formData.bookLanguage}\r\n-              className=\"input-select\"\r\n-              onChange={handleInputChange}\r\n-              required\r\n-            >\r\n-            <option value=\"\" disabled>Select a language</option>\r\n-              {africanLanguages.map((language) => (\r\n-                <option key={language} value={language}>\r\n-                  {language}\r\n-                </option>\r\n-            ))}\r\n-          </select>\r\n-          </div>\r\n-          <div className=\"form-group\">\r\n-            <label htmlFor=\"bookFile\" className=\"label\">Book File</label>\r\n-            <input\r\n-              type=\"file\"\r\n-              name=\"bookFile\"\r\n-              accept=\".pdf, .epub\"\r\n-              className=\"input-text\"\r\n-              onChange={handleInputChange}\r\n-            />\r\n-          </div>\r\n-          <div className=\"form-group\">\r\n-            <button type=\"submit\" className=\"btn-submit\" disabled={loading}>\r\n-              {loading ? 'Updating...' : 'Update'}\r\n-            </button>\r\n-          </div>\r\n-        </form>\r\n-      </div>\r\n-      <Footer />\r\n-    </div>\r\n-  );\r\n-};\r\n-\r\n-export default UpdateBook;\r\n-\r\n-async function uploadToCloudinary(file) {\r\n-  const formData = new FormData();\r\n-  formData.append('file', file);\r\n-  formData.append('upload_preset', 'your_preset_here');\r\n-  const response = await fetch('https://api.cloudinary.com/v1_1/your_cloud_name/upload', {\r\n-    method: 'POST',\r\n-    body: formData,\r\n-  });\r\n-  const data = await response.json();\r\n-  return data.secure_url;\r\n-}\r\n-\r\n-import { useMutation } from '@apollo/client';\r\n-import { useParams, useNavigate } from \"react-router-dom\";\r\n-import { useState } from 'react';\r\n-import Navbar from '../layout/Navbar.jsx';\r\n-import Footer from '../layout/Footer.jsx';\r\n-import { UPDATEBOOK } from '../graphql/mutations.js';\r\n-\r\n-const UpdateBook = () => {\r\n-  const { bookId } = useParams();\r\n-  const navigate = useNavigate();\r\n-  const [formData, setFormData] = useState({\r\n-    bookCover: null,\r\n-    bookName: '',\r\n-    bookDescription: '',\r\n-    bookAuthor: '',\r\n-    bookCategory: '',\r\n-    bookLanguage: '',\r\n-    bookFile: null,\r\n-  });\r\n-\r\n-  const [updateBook, { loading, error }] = useMutation(UPDATEBOOK);\r\n-\r\n-  const handleInputChange = (e) => {\r\n-    const { name, value, files } = e.target;\r\n-    setFormData((prev) => ({\r\n-      ...prev,\r\n-      [name]: files ? files[0] : value,\r\n-    }));\r\n-  };\r\n-\r\n-  const handleUpdate = async (e) => {\r\n-    e.preventDefault();\r\n-    const token = localStorage.getItem('token');\r\n-\r\n-    try {\r\n-      const { data } = await updateBook({\r\n-        variables: {\r\n-          updateBookId: bookId,\r\n-          updatebook: {\r\n-            bookCover: formData.bookCover ? await uploadToCloudinary(formData.bookCover) : null,\r\n-            bookName: formData.bookName,\r\n-            bookDescription: formData.bookDescription,\r\n-            bookAuthor: formData.bookAuthor,\r\n-            bookCategory: formData.bookCategory,\r\n-            bookLanguage: formData.bookLanguage,\r\n-            bookFile: formData.bookFile ? await uploadToCloudinary(formData.bookFile) : null,\r\n-          },\r\n-        },\r\n-        context: {\r\n-          headers: {\r\n-            Authorization: `Bearer ${token}`,\r\n-          },\r\n-        },\r\n-      });\r\n-\r\n-      if (data.updateBook.success) {\r\n-        alert('Book updated successfully!');\r\n-        navigate('/home');\r\n-      } else {\r\n-        alert(data.updateBook.message || 'Failed to update the book.');\r\n-      }\r\n-    } catch (error) {\r\n-      console.error('Error updating book:', error.message);\r\n-      alert('An error occurred while updating the book. Please try again.');\r\n-    }\r\n-  };\r\n-\r\n-  return (\r\n-    <div className=\"container\">\r\n-      <Navbar />\r\n-      <div className=\"form-container\">\r\n-        <h2>Update Book</h2>\r\n-        {error && <p className=\"errorMsg\">{error.message || 'An unexpected error occurred.'}</p>}\r\n-        <form className=\"create\" onSubmit={handleUpdate}>\r\n-          <input type=\"file\" name=\"bookCover\" accept=\".png, .jpg, .jpeg\" onChange={handleInputChange} />\r\n-          <input type=\"text\" name=\"bookName\" value={formData.bookName} onChange={handleInputChange} required />\r\n-          <input type=\"text\" name=\"bookAuthor\" value={formData.bookAuthor} onChange={handleInputChange} required />\r\n-          <textarea name=\"bookDescription\" value={formData.bookDescription} onChange={handleInputChange} required />\r\n-          <select name=\"bookCategory\" value={formData.bookCategory} onChange={handleInputChange} required>\r\n-            <option value=\"\" disabled>Select a category</option>\r\n-            {['Fiction', 'Non-Fiction', 'Science', 'History', 'Biography', 'Fantasy', 'Education'].map(category => (\r\n-              <option key={category} value={category}>{category}</option>\r\n-            ))}\r\n-          </select>\r\n-          <select name=\"bookLanguage\" value={formData.bookLanguage} onChange={handleInputChange} required>\r\n-            <option value=\"\" disabled>Select a language</option>\r\n-            {['Swahili', 'Yoruba', 'Zulu', 'Amharic', 'Hausa', 'Somali'].map(language => (\r\n-              <option key={language} value={language}>{language}</option>\r\n-            ))}\r\n-          </select>\r\n-          </div>\r\n-          <div className=\"form-group\">\r\n-            <label htmlFor=\"bookFile\" className=\"label\">Book File</label>\r\n-            <input\r\n-              type=\"file\"\r\n-              name=\"bookFile\"\r\n-              accept=\".pdf, .epub\"\r\n-              className=\"input-text\"\r\n-              onChange={handleInputChange}\r\n-            />\r\n-          </div>\r\n-          <div className=\"form-group\">\r\n-            <button type=\"submit\" className=\"btn-submit\" disabled={loading}>\r\n-              {loading ? 'Updating...' : 'Update'}\r\n-            </button>\r\n-          </div>\r\n-        </form>\r\n-      </div>\r\n-      <Footer />\r\n-    </div>\r\n-  );\r\n-};\r\n-\r\n-export default UpdateBook;\r\n-\r\n-async function uploadToCloudinary(file) {\r\n-  const formData = new FormData();\r\n-  formData.append('file', file);\r\n-  formData.append('upload_preset', 'your_preset_here');\r\n-  const response = await fetch('https://api.cloudinary.com/v1_1/your_cloud_name/upload', {\r\n-    method: 'POST',\r\n-    body: formData,\r\n-  });\r\n-  const data = await response.json();\r\n-  return data.secure_url;\r\n-}\r\n-\r\n-\r\n"
                },
                {
                    "date": 1741765914267,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -207,16 +207,6 @@\n };\r\n \r\n export default UpdateBook;\r\n \r\n-async function uploadToCloudinary(file) {\r\n-  const formData = new FormData();\r\n-  formData.append('file', file);\r\n-  formData.append('upload_preset', 'your_preset_here');\r\n-  const response = await fetch('https://api.cloudinary.com/v1_1/your_cloud_name/upload', {\r\n-    method: 'POST',\r\n-    body: formData,\r\n-  });\r\n-  const data = await response.json();\r\n-  return data.secure_url;\r\n-}\r\n \r\n+\r\n"
                },
                {
                    "date": 1741768061394,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -59,9 +59,9 @@\n           },\r\n         },\r\n       });\r\n \r\n-      if (data.updateBook.success) {\r\n+      if (data.updatebook.success) {\r\n         alert('Book updated successfully!');\r\n         navigate('/home');\r\n       } else {\r\n         alert(data.updateBook.message || 'Failed to update the book.');\r\n"
                },
                {
                    "date": 1741768759557,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -89,9 +89,9 @@\n     'Hausa',\r\n     'Somali',\r\n     'Shona',\r\n     'Oromo',\r\n-    'Fulbe',\r\n+    'Fulani',\r\n     'Wollof',\r\n     'Xhosa',\r\n     'Afar',\r\n     'Akan',\r\n"
                },
                {
                    "date": 1741768782712,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -89,8 +89,9 @@\n     'Hausa',\r\n     'Somali',\r\n     'Shona',\r\n     'Oromo',\r\n+     'Igbo',\r\n     'Fulani',\r\n     'Wollof',\r\n     'Xhosa',\r\n     'Afar',\r\n"
                },
                {
                    "date": 1741768871152,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -27,12 +27,12 @@\n       [name]: files ? files[0] : value,\r\n     }));\r\n   };\r\n \r\n-  const handleFileUpload = async (file) => {\r\n-    if (!file) return null;\r\n-    return file.name; \r\n-  };\r\n+  // const handleFileUpload = async (file) => {\r\n+  //   if (!file) return null;\r\n+  //   return file.name; \r\n+  // };\r\n \r\n   const handleUpdate = async (e) => {\r\n     e.preventDefault();\r\n     const token = localStorage.getItem('token');\r\n"
                },
                {
                    "date": 1741768878378,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -35,10 +35,10 @@\n \r\n   const handleUpdate = async (e) => {\r\n     e.preventDefault();\r\n     const token = localStorage.getItem('token');\r\n-    const bookCover = await handleFileUpload(formData.bookCover);\r\n-    const bookFile = await handleFileUpload(formData.bookFile);\r\n+    // const bookCover = await handleFileUpload(formData.bookCover);\r\n+    // const bookFile = await handleFileUpload(formData.bookFile);\r\n \r\n     try {\r\n       const { data } = await updateBook({\r\n         variables: {\r\n"
                },
                {
                    "date": 1741768894148,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -43,9 +43,9 @@\n       const { data } = await updateBook({\r\n         variables: {\r\n           updateBookId: bookId,\r\n           updatebook: {\r\n-            bookCover,\r\n+            bookCover: formData.bookCover,\r\n             bookName: formData.bookName,\r\n             bookDescription: formData.bookDescription,\r\n             bookAuthor: formData.bookAuthor,\r\n             bookCategory: formData.bookCategory,\r\n"
                },
                {
                    "date": 1741768904223,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -49,9 +49,9 @@\n             bookDescription: formData.bookDescription,\r\n             bookAuthor: formData.bookAuthor,\r\n             bookCategory: formData.bookCategory,\r\n             bookLanguage: formData.bookLanguage,\r\n-            bookFile,\r\n+            bookFile: ,\r\n           },\r\n         },\r\n         context: {\r\n           headers: {\r\n"
                },
                {
                    "date": 1741769380870,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,214 @@\n+import { useMutation } from '@apollo/client';\r\n+import { useParams, useNavigate } from \"react-router-dom\";\r\n+import { useState } from 'react';\r\n+import Navbar from '../layout/Navbar.jsx';\r\n+import Footer from '../layout/Footer.jsx';\r\n+import { UPDATEBOOK } from '../graphql/mutations.js';\r\n+\r\n+const UpdateBook = () => {\r\n+  const { bookId } = useParams();\r\n+  \r\n+  const navigate = useNavigate();\r\n+  const [formData, setFormData] = useState({\r\n+    bookCover: null,\r\n+    bookName: '',\r\n+    bookDescription: '',\r\n+    bookAuthor: '',\r\n+    bookCategory: '',\r\n+    bookLanguage: '',\r\n+    bookFile: null,\r\n+  });\r\n+\r\n+  const [updateBook, { loading, error }] = useMutation(UPDATEBOOK);\r\n+\r\n+  const handleInputChange = (e) => {\r\n+    const { name, value, files } = e.target;\r\n+    setFormData((prev) => ({\r\n+      ...prev,\r\n+      [name]: files ? files[0] : value,\r\n+    }));\r\n+  };\r\n+\r\n+  // const handleFileUpload = async (file) => {\r\n+  //   if (!file) return null;\r\n+  //   return file.name; \r\n+  // };\r\n+\r\n+  const handleUpdate = async (e) => {\r\n+    e.preventDefault();\r\n+    const token = localStorage.getItem('token');\r\n+    // const bookCover = await handleFileUpload(formData.bookCover);\r\n+    // const bookFile = await handleFileUpload(formData.bookFile);\r\n+\r\n+    try {\r\n+      const { data } = await updateBook({\r\n+        variables: {\r\n+          updateBookId: bookId,\r\n+          updatebook: {\r\n+            bookCover: formData.bookCover,\r\n+            bookName: formData.bookName,\r\n+            bookDescription: formData.bookDescription,\r\n+            bookAuthor: formData.bookAuthor,\r\n+            bookCategory: formData.bookCategory,\r\n+            bookLanguage: formData.bookLanguage,\r\n+            bookFile: formData.bookFile,\r\n+          },\r\n+        },\r\n+        context: {\r\n+          headers: {\r\n+            Authorization: 'Bearer '+token,\r\n+          },\r\n+        },\r\n+      });\r\n+\r\n+      if (data.updatebook.success) {\r\n+        alert('Book updated successfully!');\r\n+        navigate('/home');\r\n+      } else {\r\n+        alert(data.updateBook.message || 'Failed to update the book.');\r\n+      }\r\n+    } catch (error) {\r\n+      console.error('Error updating book:', error.message);\r\n+      alert('An error occurred while updating the book. Please try again.');\r\n+    }\r\n+  };\r\n+  const categories = [\r\n+    'Fiction',\r\n+    'Non-Fiction',\r\n+    'Science',\r\n+    'History',\r\n+    'Biography',\r\n+    'Fantasy',\r\n+    'Education',\r\n+  ];\r\n+\r\n+  const africanLanguages = [\r\n+    'Swahili',\r\n+    'Yoruba',\r\n+    'Zulu',\r\n+    'Amharic',\r\n+    'Hausa',\r\n+    'Somali',\r\n+    'Shona',\r\n+    'Oromo',\r\n+     'Igbo',\r\n+    'Fulani',\r\n+    'Wollof',\r\n+    'Xhosa',\r\n+    'Afar',\r\n+    'Akan',\r\n+  ];\r\n+\r\n+  return (\r\n+    <div className=\"container\">\r\n+      <Navbar />\r\n+      <div className=\"form-container\">\r\n+        <h2>Update Book</h2>\r\n+        {error && (\r\n+          <p className=\"errorMsg\">\r\n+            {error.message || 'An unexpected error occurred.'}\r\n+          </p>\r\n+        )}\r\n+        <form className=\"create\" onSubmit={handleUpdate}>\r\n+          <div className=\"form-group\">\r\n+            <label htmlFor=\"bookCover\" className=\"label\">Book Cover</label>\r\n+            <input\r\n+              type=\"file\"\r\n+              name=\"bookCover\"\r\n+              accept=\".png, .jpg, .jpeg\"\r\n+              className=\"input-text\"\r\n+              onChange={handleInputChange}\r\n+            />\r\n+          </div>\r\n+          <div className=\"form-group\">\r\n+            <label htmlFor=\"bookName\" className=\"label\">Book Name</label>\r\n+            <input\r\n+              type=\"text\"\r\n+              name=\"bookName\"\r\n+              value={formData.bookName}\r\n+              className=\"input-text\"\r\n+              onChange={handleInputChange}\r\n+              required\r\n+            />\r\n+          </div>\r\n+          <div className=\"form-group\">\r\n+            <label htmlFor=\"bookAuthor\" className=\"label\">Author</label>\r\n+            <input\r\n+              type=\"text\"\r\n+              name=\"bookAuthor\"\r\n+              value={formData.bookAuthor}\r\n+              className=\"input-text\"\r\n+              onChange={handleInputChange}\r\n+              required\r\n+            />\r\n+          </div>\r\n+          <div className=\"form-group\">\r\n+            <label htmlFor=\"bookDescription\" className=\"label\">Description</label>\r\n+            <textarea\r\n+              name=\"bookDescription\"\r\n+              value={formData.bookDescription}\r\n+              className=\"input-textarea\"\r\n+              onChange={handleInputChange}\r\n+              required\r\n+            />\r\n+          </div>\r\n+          <div className=\"form-group\">\r\n+            <label htmlFor=\"bookCategory\" className=\"label\">Category</label>\r\n+            <select\r\n+              name=\"bookCategory\"\r\n+              value={formData.bookCategory}\r\n+              className=\"input-select\"\r\n+              onChange={handleInputChange}\r\n+              required\r\n+            >\r\n+            <option value=\"\" disabled>Select a category</option>\r\n+              {categories.map((category) => (\r\n+                <option key={category} value={category}>\r\n+                  {category}\r\n+                </option>\r\n+            ))}\r\n+          </select>\r\n+          </div>\r\n+          <div className=\"form-group\">\r\n+            <label htmlFor=\"bookLanguage\" className=\"label\">Language</label>\r\n+            <select\r\n+              name=\"bookLanguage\"\r\n+              value={formData.bookLanguage}\r\n+              className=\"input-select\"\r\n+              onChange={handleInputChange}\r\n+              required\r\n+            >\r\n+            <option value=\"\" disabled>Select a language</option>\r\n+              {africanLanguages.map((language) => (\r\n+                <option key={language} value={language}>\r\n+                  {language}\r\n+                </option>\r\n+            ))}\r\n+          </select>\r\n+          </div>\r\n+          <div className=\"form-group\">\r\n+            <label htmlFor=\"bookFile\" className=\"label\">Book File</label>\r\n+            <input\r\n+              type=\"file\"\r\n+              name=\"bookFile\"\r\n+              accept=\".pdf, .epub\"\r\n+              className=\"input-text\"\r\n+              onChange={handleInputChange}\r\n+            />\r\n+          </div>\r\n+          <div className=\"form-group\">\r\n+            <button type=\"submit\" className=\"btn-submit\" disabled={loading}>\r\n+              {loading ? 'Updating...' : 'Update'}\r\n+            </button>\r\n+          </div>\r\n+        </form>\r\n+      </div>\r\n+      <Footer />\r\n+    </div>\r\n+  );\r\n+};\r\n+\r\n+export default UpdateBook;\r\n+\r\n+\r\n+\r\n"
                },
                {
                    "date": 1741769528159,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -6,9 +6,9 @@\n import { UPDATEBOOK } from '../graphql/mutations.js';\r\n \r\n const UpdateBook = () => {\r\n   const { bookId } = useParams();\r\n-  \r\n+  console.log(\"bookId:\", bookId);\r\n   const navigate = useNavigate();\r\n   const [formData, setFormData] = useState({\r\n     bookCover: null,\r\n     bookName: '',\r\n@@ -42,9 +42,9 @@\n \r\n     try {\r\n       const { data } = await updateBook({\r\n         variables: {\r\n-          updateBookId: bookId,\r\n+          updateBookIdupdateBookId: bookId,\r\n           updatebook: {\r\n             bookCover: formData.bookCover,\r\n             bookName: formData.bookName,\r\n             bookDescription: formData.bookDescription,\r\n@@ -211,217 +211,4 @@\n export default UpdateBook;\r\n \r\n \r\n \r\n-import { useMutation } from '@apollo/client';\r\n-import { useParams, useNavigate } from \"react-router-dom\";\r\n-import { useState } from 'react';\r\n-import Navbar from '../layout/Navbar.jsx';\r\n-import Footer from '../layout/Footer.jsx';\r\n-import { UPDATEBOOK } from '../graphql/mutations.js';\r\n-\r\n-const UpdateBook = () => {\r\n-  const { bookId } = useParams();\r\n-  const navigate = useNavigate();\r\n-  const [formData, setFormData] = useState({\r\n-    bookCover: null,\r\n-    bookName: '',\r\n-    bookDescription: '',\r\n-    bookAuthor: '',\r\n-    bookCategory: '',\r\n-    bookLanguage: '',\r\n-    bookFile: null,\r\n-  });\r\n-\r\n-  const [updateBook, { loading, error }] = useMutation(UPDATEBOOK);\r\n-\r\n-  const handleInputChange = (e) => {\r\n-    const { name, value, files } = e.target;\r\n-    setFormData((prev) => ({\r\n-      ...prev,\r\n-      [name]: files ? files[0] : value,\r\n-    }));\r\n-  };\r\n-\r\n-  // const handleFileUpload = async (file) => {\r\n-  //   if (!file) return null;\r\n-  //   return file.name; \r\n-  // };\r\n-\r\n-  const handleUpdate = async (e) => {\r\n-    e.preventDefault();\r\n-    const token = localStorage.getItem('token');\r\n-    // const bookCover = await handleFileUpload(formData.bookCover);\r\n-    // const bookFile = await handleFileUpload(formData.bookFile);\r\n-\r\n-    try {\r\n-      const { data } = await updateBook({\r\n-        variables: {\r\n-          updateBookId: bookId,\r\n-          updatebook: {\r\n-            bookCover: formData.bookCover,\r\n-            bookName: formData.bookName,\r\n-            bookDescription: formData.bookDescription,\r\n-            bookAuthor: formData.bookAuthor,\r\n-            bookCategory: formData.bookCategory,\r\n-            bookLanguage: formData.bookLanguage,\r\n-            bookFile: ,\r\n-          },\r\n-        },\r\n-        context: {\r\n-          headers: {\r\n-            Authorization: 'Bearer '+token,\r\n-          },\r\n-        },\r\n-      });\r\n-\r\n-      if (data.updatebook.success) {\r\n-        alert('Book updated successfully!');\r\n-        navigate('/home');\r\n-      } else {\r\n-        alert(data.updateBook.message || 'Failed to update the book.');\r\n-      }\r\n-    } catch (error) {\r\n-      console.error('Error updating book:', error.message);\r\n-      alert('An error occurred while updating the book. Please try again.');\r\n-    }\r\n-  };\r\n-  const categories = [\r\n-    'Fiction',\r\n-    'Non-Fiction',\r\n-    'Science',\r\n-    'History',\r\n-    'Biography',\r\n-    'Fantasy',\r\n-    'Education',\r\n-  ];\r\n-\r\n-  const africanLanguages = [\r\n-    'Swahili',\r\n-    'Yoruba',\r\n-    'Zulu',\r\n-    'Amharic',\r\n-    'Hausa',\r\n-    'Somali',\r\n-    'Shona',\r\n-    'Oromo',\r\n-     'Igbo',\r\n-    'Fulani',\r\n-    'Wollof',\r\n-    'Xhosa',\r\n-    'Afar',\r\n-    'Akan',\r\n-  ];\r\n-\r\n-  return (\r\n-    <div className=\"container\">\r\n-      <Navbar />\r\n-      <div className=\"form-container\">\r\n-        <h2>Update Book</h2>\r\n-        {error && (\r\n-          <p className=\"errorMsg\">\r\n-            {error.message || 'An unexpected error occurred.'}\r\n-          </p>\r\n-        )}\r\n-        <form className=\"create\" onSubmit={handleUpdate}>\r\n-          <div className=\"form-group\">\r\n-            <label htmlFor=\"bookCover\" className=\"label\">Book Cover</label>\r\n-            <input\r\n-              type=\"file\"\r\n-              name=\"bookCover\"\r\n-              accept=\".png, .jpg, .jpeg\"\r\n-              className=\"input-text\"\r\n-              onChange={handleInputChange}\r\n-            />\r\n-          </div>\r\n-          <div className=\"form-group\">\r\n-            <label htmlFor=\"bookName\" className=\"label\">Book Name</label>\r\n-            <input\r\n-              type=\"text\"\r\n-              name=\"bookName\"\r\n-              value={formData.bookName}\r\n-              className=\"input-text\"\r\n-              onChange={handleInputChange}\r\n-              required\r\n-            />\r\n-          </div>\r\n-          <div className=\"form-group\">\r\n-            <label htmlFor=\"bookAuthor\" className=\"label\">Author</label>\r\n-            <input\r\n-              type=\"text\"\r\n-              name=\"bookAuthor\"\r\n-              value={formData.bookAuthor}\r\n-              className=\"input-text\"\r\n-              onChange={handleInputChange}\r\n-              required\r\n-            />\r\n-          </div>\r\n-          <div className=\"form-group\">\r\n-            <label htmlFor=\"bookDescription\" className=\"label\">Description</label>\r\n-            <textarea\r\n-              name=\"bookDescription\"\r\n-              value={formData.bookDescription}\r\n-              className=\"input-textarea\"\r\n-              onChange={handleInputChange}\r\n-              required\r\n-            />\r\n-          </div>\r\n-          <div className=\"form-group\">\r\n-            <label htmlFor=\"bookCategory\" className=\"label\">Category</label>\r\n-            <select\r\n-              name=\"bookCategory\"\r\n-              value={formData.bookCategory}\r\n-              className=\"input-select\"\r\n-              onChange={handleInputChange}\r\n-              required\r\n-            >\r\n-            <option value=\"\" disabled>Select a category</option>\r\n-              {categories.map((category) => (\r\n-                <option key={category} value={category}>\r\n-                  {category}\r\n-                </option>\r\n-            ))}\r\n-          </select>\r\n-          </div>\r\n-          <div className=\"form-group\">\r\n-            <label htmlFor=\"bookLanguage\" className=\"label\">Language</label>\r\n-            <select\r\n-              name=\"bookLanguage\"\r\n-              value={formData.bookLanguage}\r\n-              className=\"input-select\"\r\n-              onChange={handleInputChange}\r\n-              required\r\n-            >\r\n-            <option value=\"\" disabled>Select a language</option>\r\n-              {africanLanguages.map((language) => (\r\n-                <option key={language} value={language}>\r\n-                  {language}\r\n-                </option>\r\n-            ))}\r\n-          </select>\r\n-          </div>\r\n-          <div className=\"form-group\">\r\n-            <label htmlFor=\"bookFile\" className=\"label\">Book File</label>\r\n-            <input\r\n-              type=\"file\"\r\n-              name=\"bookFile\"\r\n-              accept=\".pdf, .epub\"\r\n-              className=\"input-text\"\r\n-              onChange={handleInputChange}\r\n-            />\r\n-          </div>\r\n-          <div className=\"form-group\">\r\n-            <button type=\"submit\" className=\"btn-submit\" disabled={loading}>\r\n-              {loading ? 'Updating...' : 'Update'}\r\n-            </button>\r\n-          </div>\r\n-        </form>\r\n-      </div>\r\n-      <Footer />\r\n-    </div>\r\n-  );\r\n-};\r\n-\r\n-export default UpdateBook;\r\n-\r\n-\r\n-\r\n"
                },
                {
                    "date": 1741769551644,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -42,9 +42,9 @@\n \r\n     try {\r\n       const { data } = await updateBook({\r\n         variables: {\r\n-          updateBookIdupdateBookId: bookId,\r\n+          updateBookId: bookId,\r\n           updatebook: {\r\n             bookCover: formData.bookCover,\r\n             bookName: formData.bookName,\r\n             bookDescription: formData.bookDescription,\r\n@@ -59,9 +59,9 @@\n             Authorization: 'Bearer '+token,\r\n           },\r\n         },\r\n       });\r\n-\r\n+co\r\n       if (data.updatebook.success) {\r\n         alert('Book updated successfully!');\r\n         navigate('/home');\r\n       } else {\r\n"
                },
                {
                    "date": 1741769560055,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -59,9 +59,9 @@\n             Authorization: 'Bearer '+token,\r\n           },\r\n         },\r\n       });\r\n-co\r\n+console.log()\r\n       if (data.updatebook.success) {\r\n         alert('Book updated successfully!');\r\n         navigate('/home');\r\n       } else {\r\n"
                },
                {
                    "date": 1741769575346,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,214 @@\n+import { useMutation } from '@apollo/client';\r\n+import { useParams, useNavigate } from \"react-router-dom\";\r\n+import { useState } from 'react';\r\n+import Navbar from '../layout/Navbar.jsx';\r\n+import Footer from '../layout/Footer.jsx';\r\n+import { UPDATEBOOK } from '../graphql/mutations.js';\r\n+\r\n+const UpdateBook = () => {\r\n+  const { bookId } = useParams();\r\n+  \r\n+  const navigate = useNavigate();\r\n+  const [formData, setFormData] = useState({\r\n+    bookCover: null,\r\n+    bookName: '',\r\n+    bookDescription: '',\r\n+    bookAuthor: '',\r\n+    bookCategory: '',\r\n+    bookLanguage: '',\r\n+    bookFile: null,\r\n+  });\r\n+\r\n+  const [updateBook, { loading, error }] = useMutation(UPDATEBOOK);\r\n+\r\n+  const handleInputChange = (e) => {\r\n+    const { name, value, files } = e.target;\r\n+    setFormData((prev) => ({\r\n+      ...prev,\r\n+      [name]: files ? files[0] : value,\r\n+    }));\r\n+  };\r\n+\r\n+  // const handleFileUpload = async (file) => {\r\n+  //   if (!file) return null;\r\n+  //   return file.name; \r\n+  // };\r\n+\r\n+  const handleUpdate = async (e) => {\r\n+    e.preventDefault();\r\n+    const token = localStorage.getItem('token');\r\n+    // const bookCover = await handleFileUpload(formData.bookCover);\r\n+    // const bookFile = await handleFileUpload(formData.bookFile);\r\n+\r\n+    try {\r\n+      const { data } = await updateBook({\r\n+        variables: {\r\n+          updateBookId: bookId,\r\n+          updatebook: {\r\n+            bookCover: formData.bookCover,\r\n+            bookName: formData.bookName,\r\n+            bookDescription: formData.bookDescription,\r\n+            bookAuthor: formData.bookAuthor,\r\n+            bookCategory: formData.bookCategory,\r\n+            bookLanguage: formData.bookLanguage,\r\n+            bookFile: formData.bookFile,\r\n+          },\r\n+        },\r\n+        context: {\r\n+          headers: {\r\n+            Authorization: 'Bearer '+token,\r\n+          },\r\n+        },\r\n+      });\r\n+console.log()\r\n+      if (data.updatebook.success) {\r\n+        alert('Book updated successfully!');\r\n+        navigate('/home');\r\n+      } else {\r\n+        alert(data.updateBook.message || 'Failed to update the book.');\r\n+      }\r\n+    } catch (error) {\r\n+      console.error('Error updating book:', error.message);\r\n+      alert('An error occurred while updating the book. Please try again.');\r\n+    }\r\n+  };\r\n+  const categories = [\r\n+    'Fiction',\r\n+    'Non-Fiction',\r\n+    'Science',\r\n+    'History',\r\n+    'Biography',\r\n+    'Fantasy',\r\n+    'Education',\r\n+  ];\r\n+\r\n+  const africanLanguages = [\r\n+    'Swahili',\r\n+    'Yoruba',\r\n+    'Zulu',\r\n+    'Amharic',\r\n+    'Hausa',\r\n+    'Somali',\r\n+    'Shona',\r\n+    'Oromo',\r\n+     'Igbo',\r\n+    'Fulani',\r\n+    'Wollof',\r\n+    'Xhosa',\r\n+    'Afar',\r\n+    'Akan',\r\n+  ];\r\n+\r\n+  return (\r\n+    <div className=\"container\">\r\n+      <Navbar />\r\n+      <div className=\"form-container\">\r\n+        <h2>Update Book</h2>\r\n+        {error && (\r\n+          <p className=\"errorMsg\">\r\n+            {error.message || 'An unexpected error occurred.'}\r\n+          </p>\r\n+        )}\r\n+        <form className=\"create\" onSubmit={handleUpdate}>\r\n+          <div className=\"form-group\">\r\n+            <label htmlFor=\"bookCover\" className=\"label\">Book Cover</label>\r\n+            <input\r\n+              type=\"file\"\r\n+              name=\"bookCover\"\r\n+              accept=\".png, .jpg, .jpeg\"\r\n+              className=\"input-text\"\r\n+              onChange={handleInputChange}\r\n+            />\r\n+          </div>\r\n+          <div className=\"form-group\">\r\n+            <label htmlFor=\"bookName\" className=\"label\">Book Name</label>\r\n+            <input\r\n+              type=\"text\"\r\n+              name=\"bookName\"\r\n+              value={formData.bookName}\r\n+              className=\"input-text\"\r\n+              onChange={handleInputChange}\r\n+              required\r\n+            />\r\n+          </div>\r\n+          <div className=\"form-group\">\r\n+            <label htmlFor=\"bookAuthor\" className=\"label\">Author</label>\r\n+            <input\r\n+              type=\"text\"\r\n+              name=\"bookAuthor\"\r\n+              value={formData.bookAuthor}\r\n+              className=\"input-text\"\r\n+              onChange={handleInputChange}\r\n+              required\r\n+            />\r\n+          </div>\r\n+          <div className=\"form-group\">\r\n+            <label htmlFor=\"bookDescription\" className=\"label\">Description</label>\r\n+            <textarea\r\n+              name=\"bookDescription\"\r\n+              value={formData.bookDescription}\r\n+              className=\"input-textarea\"\r\n+              onChange={handleInputChange}\r\n+              required\r\n+            />\r\n+          </div>\r\n+          <div className=\"form-group\">\r\n+            <label htmlFor=\"bookCategory\" className=\"label\">Category</label>\r\n+            <select\r\n+              name=\"bookCategory\"\r\n+              value={formData.bookCategory}\r\n+              className=\"input-select\"\r\n+              onChange={handleInputChange}\r\n+              required\r\n+            >\r\n+            <option value=\"\" disabled>Select a category</option>\r\n+              {categories.map((category) => (\r\n+                <option key={category} value={category}>\r\n+                  {category}\r\n+                </option>\r\n+            ))}\r\n+          </select>\r\n+          </div>\r\n+          <div className=\"form-group\">\r\n+            <label htmlFor=\"bookLanguage\" className=\"label\">Language</label>\r\n+            <select\r\n+              name=\"bookLanguage\"\r\n+              value={formData.bookLanguage}\r\n+              className=\"input-select\"\r\n+              onChange={handleInputChange}\r\n+              required\r\n+            >\r\n+            <option value=\"\" disabled>Select a language</option>\r\n+              {africanLanguages.map((language) => (\r\n+                <option key={language} value={language}>\r\n+                  {language}\r\n+                </option>\r\n+            ))}\r\n+          </select>\r\n+          </div>\r\n+          <div className=\"form-group\">\r\n+            <label htmlFor=\"bookFile\" className=\"label\">Book File</label>\r\n+            <input\r\n+              type=\"file\"\r\n+              name=\"bookFile\"\r\n+              accept=\".pdf, .epub\"\r\n+              className=\"input-text\"\r\n+              onChange={handleInputChange}\r\n+            />\r\n+          </div>\r\n+          <div className=\"form-group\">\r\n+            <button type=\"submit\" className=\"btn-submit\" disabled={loading}>\r\n+              {loading ? 'Updating...' : 'Update'}\r\n+            </button>\r\n+          </div>\r\n+        </form>\r\n+      </div>\r\n+      <Footer />\r\n+    </div>\r\n+  );\r\n+};\r\n+\r\n+export default UpdateBook;\r\n+\r\n+\r\n+\r\n"
                },
                {
                    "date": 1741769585000,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -59,9 +59,9 @@\n             Authorization: 'Bearer '+token,\r\n           },\r\n         },\r\n       });\r\n-console.log()\r\n+      console.log(\"bookId:\", bookId);\r\n       if (data.updatebook.success) {\r\n         alert('Book updated successfully!');\r\n         navigate('/home');\r\n       } else {\r\n@@ -211,218 +211,4 @@\n export default UpdateBook;\r\n \r\n \r\n \r\n-import { useMutation } from '@apollo/client';\r\n-import { useParams, useNavigate } from \"react-router-dom\";\r\n-import { useState } from 'react';\r\n-import Navbar from '../layout/Navbar.jsx';\r\n-import Footer from '../layout/Footer.jsx';\r\n-import { UPDATEBOOK } from '../graphql/mutations.js';\r\n-\r\n-const UpdateBook = () => {\r\n-  const { bookId } = useParams();\r\n-  console.log(\"bookId:\", bookId);\r\n-  const navigate = useNavigate();\r\n-  const [formData, setFormData] = useState({\r\n-    bookCover: null,\r\n-    bookName: '',\r\n-    bookDescription: '',\r\n-    bookAuthor: '',\r\n-    bookCategory: '',\r\n-    bookLanguage: '',\r\n-    bookFile: null,\r\n-  });\r\n-\r\n-  const [updateBook, { loading, error }] = useMutation(UPDATEBOOK);\r\n-\r\n-  const handleInputChange = (e) => {\r\n-    const { name, value, files } = e.target;\r\n-    setFormData((prev) => ({\r\n-      ...prev,\r\n-      [name]: files ? files[0] : value,\r\n-    }));\r\n-  };\r\n-\r\n-  // const handleFileUpload = async (file) => {\r\n-  //   if (!file) return null;\r\n-  //   return file.name; \r\n-  // };\r\n-\r\n-  const handleUpdate = async (e) => {\r\n-    e.preventDefault();\r\n-    const token = localStorage.getItem('token');\r\n-    // const bookCover = await handleFileUpload(formData.bookCover);\r\n-    // const bookFile = await handleFileUpload(formData.bookFile);\r\n-\r\n-    try {\r\n-      const { data } = await updateBook({\r\n-        variables: {\r\n-          updateBookId: bookId,\r\n-          updatebook: {\r\n-            bookCover: formData.bookCover,\r\n-            bookName: formData.bookName,\r\n-            bookDescription: formData.bookDescription,\r\n-            bookAuthor: formData.bookAuthor,\r\n-            bookCategory: formData.bookCategory,\r\n-            bookLanguage: formData.bookLanguage,\r\n-            bookFile: formData.bookFile,\r\n-          },\r\n-        },\r\n-        context: {\r\n-          headers: {\r\n-            Authorization: 'Bearer '+token,\r\n-          },\r\n-        },\r\n-      });\r\n-console.log()\r\n-      if (data.updatebook.success) {\r\n-        alert('Book updated successfully!');\r\n-        navigate('/home');\r\n-      } else {\r\n-        alert(data.updateBook.message || 'Failed to update the book.');\r\n-      }\r\n-    } catch (error) {\r\n-      console.error('Error updating book:', error.message);\r\n-      alert('An error occurred while updating the book. Please try again.');\r\n-    }\r\n-  };\r\n-  const categories = [\r\n-    'Fiction',\r\n-    'Non-Fiction',\r\n-    'Science',\r\n-    'History',\r\n-    'Biography',\r\n-    'Fantasy',\r\n-    'Education',\r\n-  ];\r\n-\r\n-  const africanLanguages = [\r\n-    'Swahili',\r\n-    'Yoruba',\r\n-    'Zulu',\r\n-    'Amharic',\r\n-    'Hausa',\r\n-    'Somali',\r\n-    'Shona',\r\n-    'Oromo',\r\n-     'Igbo',\r\n-    'Fulani',\r\n-    'Wollof',\r\n-    'Xhosa',\r\n-    'Afar',\r\n-    'Akan',\r\n-  ];\r\n-\r\n-  return (\r\n-    <div className=\"container\">\r\n-      <Navbar />\r\n-      <div className=\"form-container\">\r\n-        <h2>Update Book</h2>\r\n-        {error && (\r\n-          <p className=\"errorMsg\">\r\n-            {error.message || 'An unexpected error occurred.'}\r\n-          </p>\r\n-        )}\r\n-        <form className=\"create\" onSubmit={handleUpdate}>\r\n-          <div className=\"form-group\">\r\n-            <label htmlFor=\"bookCover\" className=\"label\">Book Cover</label>\r\n-            <input\r\n-              type=\"file\"\r\n-              name=\"bookCover\"\r\n-              accept=\".png, .jpg, .jpeg\"\r\n-              className=\"input-text\"\r\n-              onChange={handleInputChange}\r\n-            />\r\n-          </div>\r\n-          <div className=\"form-group\">\r\n-            <label htmlFor=\"bookName\" className=\"label\">Book Name</label>\r\n-            <input\r\n-              type=\"text\"\r\n-              name=\"bookName\"\r\n-              value={formData.bookName}\r\n-              className=\"input-text\"\r\n-              onChange={handleInputChange}\r\n-              required\r\n-            />\r\n-          </div>\r\n-          <div className=\"form-group\">\r\n-            <label htmlFor=\"bookAuthor\" className=\"label\">Author</label>\r\n-            <input\r\n-              type=\"text\"\r\n-              name=\"bookAuthor\"\r\n-              value={formData.bookAuthor}\r\n-              className=\"input-text\"\r\n-              onChange={handleInputChange}\r\n-              required\r\n-            />\r\n-          </div>\r\n-          <div className=\"form-group\">\r\n-            <label htmlFor=\"bookDescription\" className=\"label\">Description</label>\r\n-            <textarea\r\n-              name=\"bookDescription\"\r\n-              value={formData.bookDescription}\r\n-              className=\"input-textarea\"\r\n-              onChange={handleInputChange}\r\n-              required\r\n-            />\r\n-          </div>\r\n-          <div className=\"form-group\">\r\n-            <label htmlFor=\"bookCategory\" className=\"label\">Category</label>\r\n-            <select\r\n-              name=\"bookCategory\"\r\n-              value={formData.bookCategory}\r\n-              className=\"input-select\"\r\n-              onChange={handleInputChange}\r\n-              required\r\n-            >\r\n-            <option value=\"\" disabled>Select a category</option>\r\n-              {categories.map((category) => (\r\n-                <option key={category} value={category}>\r\n-                  {category}\r\n-                </option>\r\n-            ))}\r\n-          </select>\r\n-          </div>\r\n-          <div className=\"form-group\">\r\n-            <label htmlFor=\"bookLanguage\" className=\"label\">Language</label>\r\n-            <select\r\n-              name=\"bookLanguage\"\r\n-              value={formData.bookLanguage}\r\n-              className=\"input-select\"\r\n-              onChange={handleInputChange}\r\n-              required\r\n-            >\r\n-            <option value=\"\" disabled>Select a language</option>\r\n-              {africanLanguages.map((language) => (\r\n-                <option key={language} value={language}>\r\n-                  {language}\r\n-                </option>\r\n-            ))}\r\n-          </select>\r\n-          </div>\r\n-          <div className=\"form-group\">\r\n-            <label htmlFor=\"bookFile\" className=\"label\">Book File</label>\r\n-            <input\r\n-              type=\"file\"\r\n-              name=\"bookFile\"\r\n-              accept=\".pdf, .epub\"\r\n-              className=\"input-text\"\r\n-              onChange={handleInputChange}\r\n-            />\r\n-          </div>\r\n-          <div className=\"form-group\">\r\n-            <button type=\"submit\" className=\"btn-submit\" disabled={loading}>\r\n-              {loading ? 'Updating...' : 'Update'}\r\n-            </button>\r\n-          </div>\r\n-        </form>\r\n-      </div>\r\n-      <Footer />\r\n-    </div>\r\n-  );\r\n-};\r\n-\r\n-export default UpdateBook;\r\n-\r\n-\r\n-\r\n"
                },
                {
                    "date": 1741769604876,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -59,9 +59,9 @@\n             Authorization: 'Bearer '+token,\r\n           },\r\n         },\r\n       });\r\n-      console.log(\"bookId:\", bookId);\r\n+      console.log(\"bookId:\", ubookId);\r\n       if (data.updatebook.success) {\r\n         alert('Book updated successfully!');\r\n         navigate('/home');\r\n       } else {\r\n"
                },
                {
                    "date": 1741769610121,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -59,9 +59,9 @@\n             Authorization: 'Bearer '+token,\r\n           },\r\n         },\r\n       });\r\n-      console.log(\"bookId:\", updateBookbookId);\r\n+      console.log(\"bookId:\", updateBook.);\r\n       if (data.updatebook.success) {\r\n         alert('Book updated successfully!');\r\n         navigate('/home');\r\n       } else {\r\n"
                },
                {
                    "date": 1741787769906,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -30,9 +30,16 @@\n       [name]: files ? files[0] : value,\r\n     }));\r\n   };\r\n \r\n-  \r\n+  const { loading, error, data } = useQuery(BOOK, {\r\n+      variables: { bookId },\r\n+      context: {\r\n+        headers: {\r\n+          Authorization: `Bearer ${token}`,\r\n+        },\r\n+      },\r\n+    });\r\n \r\n   const handleUpdate = async (e) => {\r\n     e.preventDefault();\r\n     const token = localStorage.getItem('token');\r\n"
                }
            ],
            "date": 1741762635286,
            "name": "Commit-0",
            "content": "import { useMutation } from '@apollo/client';\r\nimport { useParams, useNavigate } from \"react-router-dom\";\r\nimport { useState } from 'react';\r\nimport Navbar from '../layout/Navbar.jsx';\r\nimport Footer from '../layout/Footer.jsx';\r\nimport { UPDATEBOOK } from '../graphql/mutations.js';\r\n\r\nconst UpdateBook = () => {\r\n  const { bookId } = useParams();\r\n  const navigate = useNavigate();\r\n  const [formData, setFormData] = useState({\r\n    bookCover: null,\r\n    bookName: '',\r\n    bookDescription: '',\r\n    bookAuthor: '',\r\n    bookCategory: '',\r\n    bookLanguage: '',\r\n    bookFile: null,\r\n  });\r\n\r\n  const [updateBook, { loading, error }] = useMutation(UPDATEBOOK);\r\n\r\n  const handleInputChange = (e) => {\r\n    const { name, value, files } = e.target;\r\n    setFormData((prev) => ({\r\n      ...prev,\r\n      [name]: files ? files[0] : value,\r\n    }));\r\n  };\r\n\r\n  const handleFileUpload = async (file) => {\r\n    if (!file) return null;\r\n    return file.name; \r\n  };\r\n\r\n  const handleUpdate = async (e) => {\r\n    e.preventDefault();\r\n\r\n    const token = localStorage.getItem('token');\r\n    const bookCover = await handleFileUpload(formData.bookCover);\r\n    const bookFile = await handleFileUpload(formData.bookFile);\r\n\r\n    try {\r\n      const { data } = await updateBook({\r\n        variables: {\r\n          updateBookId: bookId,\r\n          updatebook: {\r\n            bookCover,\r\n            bookName: formData.bookName,\r\n            bookDescription: formData.bookDescription,\r\n            bookAuthor: formData.bookAuthor,\r\n            bookCategory: formData.bookCategory,\r\n            bookLanguage: formData.bookLanguage,\r\n            bookFile,\r\n          },\r\n        },\r\n        context: {\r\n          headers: {\r\n            Authorization: 'Bearer '+token,\r\n          },\r\n        },\r\n      });\r\n\r\n      if (data.updateBook.success) {\r\n        alert('Book updated successfully!');\r\n        navigate('/home'); // Navigate to the home page or book list.\r\n      } else {\r\n        alert(data.updateBook.message || 'Failed to update the book.');\r\n      }\r\n    } catch (error) {\r\n      console.error('Error updating book:', error.message);\r\n      alert('An error occurred while updating the book. Please try again.');\r\n    }\r\n  };\r\n\r\n  const categories = [\r\n    'Fiction',\r\n    'Non-Fiction',\r\n    'Science',\r\n    'History',\r\n    'Biography',\r\n    'Fantasy',\r\n    'Education',\r\n  ];\r\n\r\n  const africanLanguages = [\r\n    'Swahili',\r\n    'Yoruba',\r\n    'Zulu',\r\n    'Amharic',\r\n    'Hausa',\r\n    'Somali',\r\n    'Shona',\r\n    'Oromo',\r\n    'Fulbe',\r\n    'Wollof',\r\n    'Xhosa',\r\n    'Afar',\r\n    'Akan',\r\n  ];\r\n\r\n  return (\r\n    <div className=\"container\">\r\n      <Navbar />\r\n      <div className=\"form-container\">\r\n        <h2>Update Book</h2>\r\n        {error && (\r\n          <p className=\"errorMsg\">\r\n            {error.message || 'An unexpected error occurred.'}\r\n          </p>\r\n        )}\r\n        <form className=\"create\" onSubmit={handleUpdate}>\r\n          <div className=\"form-group\">\r\n            <label htmlFor=\"bookCover\" className=\"label\">Book Cover</label>\r\n            <input\r\n              type=\"file\"\r\n              name=\"bookCover\"\r\n              accept=\".png, .jpg, .jpeg\"\r\n              className=\"input-text\"\r\n              onChange={handleInputChange}\r\n            />\r\n          </div>\r\n          <div className=\"form-group\">\r\n            <label htmlFor=\"bookName\" className=\"label\">Book Name</label>\r\n            <input\r\n              type=\"text\"\r\n              name=\"bookName\"\r\n              value={formData.bookName}\r\n              className=\"input-text\"\r\n              onChange={handleInputChange}\r\n              required\r\n            />\r\n          </div>\r\n          <div className=\"form-group\">\r\n            <label htmlFor=\"bookAuthor\" className=\"label\">Author</label>\r\n            <input\r\n              type=\"text\"\r\n              name=\"bookAuthor\"\r\n              value={formData.bookAuthor}\r\n              className=\"input-text\"\r\n              onChange={handleInputChange}\r\n              required\r\n            />\r\n          </div>\r\n          <div className=\"form-group\">\r\n            <label htmlFor=\"bookDescription\" className=\"label\">Description</label>\r\n            <textarea\r\n              name=\"bookDescription\"\r\n              value={formData.bookDescription}\r\n              className=\"input-textarea\"\r\n              onChange={handleInputChange}\r\n              required\r\n            />\r\n          </div>\r\n          <div className=\"form-group\">\r\n            <label htmlFor=\"bookCategory\" className=\"label\">Category</label>\r\n            <select\r\n              name=\"bookCategory\"\r\n              value={formData.bookCategory}\r\n              className=\"input-select\"\r\n              onChange={handleInputChange}\r\n              required\r\n            >\r\n              <option value=\"\" disabled>Select a category</option>\r\n              {categories.map((category) => (\r\n                <option key={category} value={category}>\r\n                  {category}\r\n                </option>\r\n              ))}\r\n            </select>\r\n          </div>\r\n          <div className=\"form-group\">\r\n            <label htmlFor=\"bookLanguage\" className=\"label\">Language</label>\r\n            <select\r\n              name=\"bookLanguage\"\r\n              value={formData.bookLanguage}\r\n              className=\"input-select\"\r\n              onChange={handleInputChange}\r\n              required\r\n            >\r\n              <option value=\"\" disabled>Select a language</option>\r\n              {africanLanguages.map((language) => (\r\n                <option key={language} value={language}>\r\n                  {language}\r\n                </option>\r\n              ))}\r\n            </select>\r\n          </div>\r\n          <div className=\"form-group\">\r\n            <label htmlFor=\"bookFile\" className=\"label\">Book File</label>\r\n            <input\r\n              type=\"file\"\r\n              name=\"bookFile\"\r\n              accept=\".pdf, .epub\"\r\n              className=\"input-text\"\r\n              onChange={handleInputChange}\r\n            />\r\n          </div>\r\n          <div className=\"form-group\">\r\n            <button type=\"submit\" className=\"btn-submit\" disabled={loading}>\r\n              {loading ? 'Updating...' : 'Update'}\r\n            </button>\r\n          </div>\r\n        </form>\r\n      </div>\r\n      <Footer />\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default UpdateBook;\r\n"
        }
    ]
}