{
    "sourceFile": "server/middleware/auth.js",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 1,
            "patches": [
                {
                    "date": 1735463062832,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1735463102810,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,35 +1,35 @@\n-// import jwt from 'jsonwebtoken';\r\n+import jwt from 'jsonwebtoken';\r\n \r\n-// // Middleware to verify the token\r\n-// export const tokenChecker = (req, res, next) => {\r\n-//     const authHeader = req.get('Authorization'); // Retrieve Authorization header\r\n+// Middleware to verify the token\r\n+export const tokenChecker = (req, res, next) => {\r\n+    const authHeader = req.get('Authorization'); // Retrieve Authorization header\r\n \r\n-//     if (!authHeader) {\r\n-//         // Respond with an error if no token is provided\r\n-//         return res.status(401).json({ error: 'No token provided. Please log in.' });\r\n-//     }\r\n+    if (!authHeader) {\r\n+        // Respond with an error if no token is provided\r\n+        return res.status(401).json({ error: 'No token provided. Please log in.' });\r\n+    }\r\n \r\n-//     const token = authHeader.split(' ')[1]; // Extract the token\r\n-//     let decodedToken;\r\n+    const token = authHeader.split(' ')[1]; // Extract the token\r\n+    let decodedToken;\r\n \r\n-//     try {\r\n-//         // Verify the token\r\n-//         decodedToken = jwt.verify(token, process.env.SECRET_STRING);\r\n+    try {\r\n+        // Verify the token\r\n+        decodedToken = jwt.verify(token, process.env.SECRET_STRING);\r\n \r\n-//         if (!decodedToken) {\r\n-//             return res.status(401).json({ error: 'Invalid token. Please log in again.' });\r\n-//         }\r\n+        if (!decodedToken) {\r\n+            return res.status(401).json({ error: 'Invalid token. Please log in again.' });\r\n+        }\r\n \r\n-//         // Attach user data to the request object\r\n-//         req.user = {\r\n-//             id: decodedToken.id,\r\n-//             role: decodedToken.role,\r\n-//         };\r\n+        // Attach user data to the request object\r\n+        req.user = {\r\n+            id: decodedToken.id,\r\n+            role: decodedToken.role,\r\n+        };\r\n \r\n-//         next(); // Proceed to the next middleware or route handler\r\n-//     } catch (error) {\r\n-//         // Handle token verification errors\r\n-//         return res.status(400).json({ error: `Token verification failed: ${error.message}` });\r\n-//     }\r\n-// };\r\n+        next(); // Proceed to the next middleware or route handler\r\n+    } catch (error) {\r\n+        // Handle token verification errors\r\n+        return res.status(400).json({ error: `Token verification failed: ${error.message}` });\r\n+    }\r\n+};\r\n \r\n"
                }
            ],
            "date": 1735463062832,
            "name": "Commit-0",
            "content": "// import jwt from 'jsonwebtoken';\r\n\r\n// // Middleware to verify the token\r\n// export const tokenChecker = (req, res, next) => {\r\n//     const authHeader = req.get('Authorization'); // Retrieve Authorization header\r\n\r\n//     if (!authHeader) {\r\n//         // Respond with an error if no token is provided\r\n//         return res.status(401).json({ error: 'No token provided. Please log in.' });\r\n//     }\r\n\r\n//     const token = authHeader.split(' ')[1]; // Extract the token\r\n//     let decodedToken;\r\n\r\n//     try {\r\n//         // Verify the token\r\n//         decodedToken = jwt.verify(token, process.env.SECRET_STRING);\r\n\r\n//         if (!decodedToken) {\r\n//             return res.status(401).json({ error: 'Invalid token. Please log in again.' });\r\n//         }\r\n\r\n//         // Attach user data to the request object\r\n//         req.user = {\r\n//             id: decodedToken.id,\r\n//             role: decodedToken.role,\r\n//         };\r\n\r\n//         next(); // Proceed to the next middleware or route handler\r\n//     } catch (error) {\r\n//         // Handle token verification errors\r\n//         return res.status(400).json({ error: `Token verification failed: ${error.message}` });\r\n//     }\r\n// };\r\n\r\n"
        }
    ]
}