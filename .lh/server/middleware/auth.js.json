{
    "sourceFile": "server/middleware/auth.js",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 17,
            "patches": [
                {
                    "date": 1740305029942,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1740305038350,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -24,9 +24,9 @@\n         req.user = {\r\n             id: decodedToken.id,\r\n             role: decodedToken.role,\r\n         };\r\n-consol\r\n+console.log()\r\n         next(); // Proceed to the next middleware or route handler\r\n     } catch (error) {\r\n         // Handle token verification errors\r\n         return res.status(400).json({ error: `Token verification failed: ${error.message}` });\r\n"
                },
                {
                    "date": 1740305044929,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,35 @@\n+import jwt from 'jsonwebtoken';\r\n+\r\n+// Middleware to verify the token\r\n+export const tokenChecker = (req, res, next) => {\r\n+    const authHeader = req.get('Authorization'); // Retrieve Authorization header\r\n+\r\n+    if (!authHeader) {\r\n+        // Respond with an error if no token is provided\r\n+        return res.status(401).json({ error: 'No token provided. Please log in.' });\r\n+    }\r\n+\r\n+    const token = authHeader.split(' ')[1]; // Extract the token\r\n+    let decodedToken;\r\n+\r\n+    try {\r\n+        // Verify the token\r\n+        decodedToken = jwt.verify(token, process.env.SECRET_STRING);\r\n+\r\n+        if (!decodedToken) {\r\n+            return res.status(401).json({ error: 'Invalid token. Please log in again.' });\r\n+        }\r\n+\r\n+        // Attach user data to the request object\r\n+        req.user = {\r\n+            id: decodedToken.id,\r\n+            role: decodedToken.role,\r\n+        };\r\n+console.log(req.u)\r\n+        next(); // Proceed to the next middleware or route handler\r\n+    } catch (error) {\r\n+        // Handle token verification errors\r\n+        return res.status(400).json({ error: `Token verification failed: ${error.message}` });\r\n+    }\r\n+};\r\n+\r\n"
                },
                {
                    "date": 1740305295154,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,35 @@\n+import jwt from 'jsonwebtoken';\r\n+\r\n+// Middleware to verify the token\r\n+export const tokenChecker = (req, res, next) => {\r\n+    const authHeader = req.get('Authorization'); // Retrieve Authorization header\r\n+\r\n+    if (!authHeader) {\r\n+        // Respond with an error if no token is provided\r\n+        return res.status(401).json({ error: 'No token provided. Please log in.' });\r\n+    }\r\n+\r\n+    const token = authHeader.split(' ')[1]; // Extract the token\r\n+    let decodedToken;\r\n+\r\n+    try {\r\n+        // Verify the token\r\n+        decodedToken = jwt.verify(token, process.env.SECRET_STRING);\r\n+        console.log(req.user)\r\n+        if (!decodedToken) {\r\n+            return res.status(401).json({ error: 'Invalid token. Please log in again.' });\r\n+        }\r\n+\r\n+        // Attach user data to the request object\r\n+        req.user = {\r\n+            id: decodedToken.id,\r\n+            role: decodedToken.role,\r\n+        };\r\n+console.log(req.user)\r\n+        next(); // Proceed to the next middleware or route handler\r\n+    } catch (error) {\r\n+        // Handle token verification errors\r\n+        return res.status(400).json({ error: `Token verification failed: ${error.message}` });\r\n+    }\r\n+};\r\n+\r\n"
                },
                {
                    "date": 1740305303680,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -14,9 +14,9 @@\n \r\n     try {\r\n         // Verify the token\r\n         decodedToken = jwt.verify(token, process.env.SECRET_STRING);\r\n-        console.log(req.user)\r\n+        console.log(decodedToken)\r\n         if (!decodedToken) {\r\n             return res.status(401).json({ error: 'Invalid token. Please log in again.' });\r\n         }\r\n \r\n@@ -32,74 +32,4 @@\n         return res.status(400).json({ error: `Token verification failed: ${error.message}` });\r\n     }\r\n };\r\n \r\n-import jwt from 'jsonwebtoken';\r\n-\r\n-// Middleware to verify the token\r\n-export const tokenChecker = (req, res, next) => {\r\n-    const authHeader = req.get('Authorization'); // Retrieve Authorization header\r\n-\r\n-    if (!authHeader) {\r\n-        // Respond with an error if no token is provided\r\n-        return res.status(401).json({ error: 'No token provided. Please log in.' });\r\n-    }\r\n-\r\n-    const token = authHeader.split(' ')[1]; // Extract the token\r\n-    let decodedToken;\r\n-\r\n-    try {\r\n-        // Verify the token\r\n-        decodedToken = jwt.verify(token, process.env.SECRET_STRING);\r\n-\r\n-        if (!decodedToken) {\r\n-            return res.status(401).json({ error: 'Invalid token. Please log in again.' });\r\n-        }\r\n-\r\n-        // Attach user data to the request object\r\n-        req.user = {\r\n-            id: decodedToken.id,\r\n-            role: decodedToken.role,\r\n-        };\r\n-console.log(req.u)\r\n-        next(); // Proceed to the next middleware or route handler\r\n-    } catch (error) {\r\n-        // Handle token verification errors\r\n-        return res.status(400).json({ error: `Token verification failed: ${error.message}` });\r\n-    }\r\n-};\r\n-\r\n-import jwt from 'jsonwebtoken';\r\n-\r\n-// Middleware to verify the token\r\n-export const tokenChecker = (req, res, next) => {\r\n-    const authHeader = req.get('Authorization'); // Retrieve Authorization header\r\n-\r\n-    if (!authHeader) {\r\n-        // Respond with an error if no token is provided\r\n-        return res.status(401).json({ error: 'No token provided. Please log in.' });\r\n-    }\r\n-\r\n-    const token = authHeader.split(' ')[1]; // Extract the token\r\n-    let decodedToken;\r\n-\r\n-    try {\r\n-        // Verify the token\r\n-        decodedToken = jwt.verify(token, process.env.SECRET_STRING);\r\n-\r\n-        if (!decodedToken) {\r\n-            return res.status(401).json({ error: 'Invalid token. Please log in again.' });\r\n-        }\r\n-\r\n-        // Attach user data to the request object\r\n-        req.user = {\r\n-            id: decodedToken.id,\r\n-            role: decodedToken.role,\r\n-        };\r\n-console.log()\r\n-        next(); // Proceed to the next middleware or route handler\r\n-    } catch (error) {\r\n-        // Handle token verification errors\r\n-        return res.status(400).json({ error: `Token verification failed: ${error.message}` });\r\n-    }\r\n-};\r\n-\r\n"
                },
                {
                    "date": 1740305416999,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,35 +0,0 @@\n-import jwt from 'jsonwebtoken';\r\n-\r\n-// Middleware to verify the token\r\n-export const tokenChecker = (req, res, next) => {\r\n-    const authHeader = req.get('Authorization'); // Retrieve Authorization header\r\n-\r\n-    if (!authHeader) {\r\n-        // Respond with an error if no token is provided\r\n-        return res.status(401).json({ error: 'No token provided. Please log in.' });\r\n-    }\r\n-\r\n-    const token = authHeader.split(' ')[1]; // Extract the token\r\n-    let decodedToken;\r\n-\r\n-    try {\r\n-        // Verify the token\r\n-        decodedToken = jwt.verify(token, process.env.SECRET_STRING);\r\n-        console.log(decodedToken)\r\n-        if (!decodedToken) {\r\n-            return res.status(401).json({ error: 'Invalid token. Please log in again.' });\r\n-        }\r\n-\r\n-        // Attach user data to the request object\r\n-        req.user = {\r\n-            id: decodedToken.id,\r\n-            role: decodedToken.role,\r\n-        };\r\n-console.log(req.user)\r\n-        next(); // Proceed to the next middleware or route handler\r\n-    } catch (error) {\r\n-        // Handle token verification errors\r\n-        return res.status(400).json({ error: `Token verification failed: ${error.message}` });\r\n-    }\r\n-};\r\n-\r\n\\ No newline at end of file\n"
                },
                {
                    "date": 1740312495972,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,1 +1,36 @@\n-\n+import jwt from 'jsonwebtoken';\r\n+\r\n+export const tokenChecker = (req, res, next) => {\r\n+  // Retrieve the Authorization header\r\n+  const authHeader = req.get('Authorization');\r\n+  \r\n+  if (!authHeader) {\r\n+    return res.status(401).json({ error: 'No token provided. Please log in.' });\r\n+  }\r\n+\r\n+  // Extract token from header (expected format: \"Bearer <token>\")\r\n+  const token = authHeader.split(' ')[1];\r\n+  if (!token) {\r\n+    return res.status(401).json({ error: 'Token is missing.' });\r\n+  }\r\n+\r\n+  try {\r\n+    // Verify the token using the secret\r\n+    const decodedToken = jwt.verify(token, process.env.SECRET_STRING);\r\n+    if (!decodedToken) {\r\n+      return res.status(401).json({ error: 'Invalid token. Please log in again.' });\r\n+    }\r\n+\r\n+    // Attach user data to the request object\r\n+    req.user = {\r\n+      id: decodedToken.id,\r\n+      role: decodedToken.role,\r\n+    };\r\n+\r\n+    // Proceed to the next middleware or route handler\r\n+    next();\r\n+  } catch (error) {\r\n+    console.error('Token verification failed:', error);\r\n+    return res.status(400).json({ error: `Token verification failed: ${error.message}` });\r\n+  }\r\n+};\r\n"
                },
                {
                    "date": 1740312517956,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -9,8 +9,9 @@\n   }\r\n \r\n   // Extract token from header (expected format: \"Bearer <token>\")\r\n   const token = authHeader.split(' ')[1];\r\n+  console.log('Extracted token:', token);\r\n   if (!token) {\r\n     return res.status(401).json({ error: 'Token is missing.' });\r\n   }\r\n \r\n"
                },
                {
                    "date": 1740313138056,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -2,9 +2,9 @@\n \r\n export const tokenChecker = (req, res, next) => {\r\n   // Retrieve the Authorization header\r\n   const authHeader = req.get('Authorization');\r\n-  \r\n+  c\r\n   if (!authHeader) {\r\n     return res.status(401).json({ error: 'No token provided. Please log in.' });\r\n   }\r\n \r\n"
                },
                {
                    "date": 1740313145321,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -2,9 +2,9 @@\n \r\n export const tokenChecker = (req, res, next) => {\r\n   // Retrieve the Authorization header\r\n   const authHeader = req.get('Authorization');\r\n-  c\r\n+  console.l\r\n   if (!authHeader) {\r\n     return res.status(401).json({ error: 'No token provided. Please log in.' });\r\n   }\r\n \r\n"
                },
                {
                    "date": 1740313151132,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,37 @@\n+import jwt from 'jsonwebtoken';\r\n+\r\n+export const tokenChecker = (req, res, next) => {\r\n+  // Retrieve the Authorization header\r\n+  const authHeader = req.get('Authorization');\r\n+  console.log(au)\r\n+  if (!authHeader) {\r\n+    return res.status(401).json({ error: 'No token provided. Please log in.' });\r\n+  }\r\n+\r\n+  // Extract token from header (expected format: \"Bearer <token>\")\r\n+  const token = authHeader.split(' ')[1];\r\n+  console.log('Extracted token:', token);\r\n+  if (!token) {\r\n+    return res.status(401).json({ error: 'Token is missing.' });\r\n+  }\r\n+\r\n+  try {\r\n+    // Verify the token using the secret\r\n+    const decodedToken = jwt.verify(token, process.env.SECRET_STRING);\r\n+    if (!decodedToken) {\r\n+      return res.status(401).json({ error: 'Invalid token. Please log in again.' });\r\n+    }\r\n+\r\n+    // Attach user data to the request object\r\n+    req.user = {\r\n+      id: decodedToken.id,\r\n+      role: decodedToken.role,\r\n+    };\r\n+\r\n+    // Proceed to the next middleware or route handler\r\n+    next();\r\n+  } catch (error) {\r\n+    console.error('Token verification failed:', error);\r\n+    return res.status(400).json({ error: `Token verification failed: ${error.message}` });\r\n+  }\r\n+};\r\n"
                },
                {
                    "date": 1740314104464,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -2,9 +2,9 @@\n \r\n export const tokenChecker = (req, res, next) => {\r\n   // Retrieve the Authorization header\r\n   const authHeader = req.get('Authorization');\r\n-  console.log(au)\r\n+  console.log(authHeader)\r\n   if (!authHeader) {\r\n     return res.status(401).json({ error: 'No token provided. Please log in.' });\r\n   }\r\n \r\n@@ -26,49 +26,12 @@\n     req.user = {\r\n       id: decodedToken.id,\r\n       role: decodedToken.role,\r\n     };\r\n-\r\n+consol\r\n     // Proceed to the next middleware or route handler\r\n     next();\r\n   } catch (error) {\r\n     console.error('Token verification failed:', error);\r\n     return res.status(400).json({ error: `Token verification failed: ${error.message}` });\r\n   }\r\n };\r\n-import jwt from 'jsonwebtoken';\r\n-\r\n-export const tokenChecker = (req, res, next) => {\r\n-  // Retrieve the Authorization header\r\n-  const authHeader = req.get('Authorization');\r\n-  console.l\r\n-  if (!authHeader) {\r\n-    return res.status(401).json({ error: 'No token provided. Please log in.' });\r\n-  }\r\n-\r\n-  // Extract token from header (expected format: \"Bearer <token>\")\r\n-  const token = authHeader.split(' ')[1];\r\n-  console.log('Extracted token:', token);\r\n-  if (!token) {\r\n-    return res.status(401).json({ error: 'Token is missing.' });\r\n-  }\r\n-\r\n-  try {\r\n-    // Verify the token using the secret\r\n-    const decodedToken = jwt.verify(token, process.env.SECRET_STRING);\r\n-    if (!decodedToken) {\r\n-      return res.status(401).json({ error: 'Invalid token. Please log in again.' });\r\n-    }\r\n-\r\n-    // Attach user data to the request object\r\n-    req.user = {\r\n-      id: decodedToken.id,\r\n-      role: decodedToken.role,\r\n-    };\r\n-\r\n-    // Proceed to the next middleware or route handler\r\n-    next();\r\n-  } catch (error) {\r\n-    console.error('Token verification failed:', error);\r\n-    return res.status(400).json({ error: `Token verification failed: ${error.message}` });\r\n-  }\r\n-};\r\n"
                },
                {
                    "date": 1740314110464,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -26,9 +26,9 @@\n     req.user = {\r\n       id: decodedToken.id,\r\n       role: decodedToken.role,\r\n     };\r\n-consol\r\n+console.log\r\n     // Proceed to the next middleware or route handler\r\n     next();\r\n   } catch (error) {\r\n     console.error('Token verification failed:', error);\r\n"
                },
                {
                    "date": 1740314116874,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -26,9 +26,9 @@\n     req.user = {\r\n       id: decodedToken.id,\r\n       role: decodedToken.role,\r\n     };\r\n-console.log\r\n+console.log(req.)\r\n     // Proceed to the next middleware or route handler\r\n     next();\r\n   } catch (error) {\r\n     console.error('Token verification failed:', error);\r\n"
                },
                {
                    "date": 1740316494777,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -26,9 +26,9 @@\n     req.user = {\r\n       id: decodedToken.id,\r\n       role: decodedToken.role,\r\n     };\r\n-console.log(req.)\r\n+console.log(req.u)\r\n     // Proceed to the next middleware or route handler\r\n     next();\r\n   } catch (error) {\r\n     console.error('Token verification failed:', error);\r\n"
                },
                {
                    "date": 1740316503779,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,37 +0,0 @@\n-import jwt from 'jsonwebtoken';\r\n-\r\n-export const tokenChecker = (req, res, next) => {\r\n-  // Retrieve the Authorization header\r\n-  const authHeader = req.get('Authorization');\r\n-  console.log(authHeader)\r\n-  if (!authHeader) {\r\n-    return res.status(401).json({ error: 'No token provided. Please log in.' });\r\n-  }\r\n-\r\n-  // Extract token from header (expected format: \"Bearer <token>\")\r\n-  const token = authHeader.split(' ')[1];\r\n-  console.log('Extracted token:', token);\r\n-  if (!token) {\r\n-    return res.status(401).json({ error: 'Token is missing.' });\r\n-  }\r\n-\r\n-  try {\r\n-    // Verify the token using the secret\r\n-    const decodedToken = jwt.verify(token, process.env.SECRET_STRING);\r\n-    if (!decodedToken) {\r\n-      return res.status(401).json({ error: 'Invalid token. Please log in again.' });\r\n-    }\r\n-\r\n-    // Attach user data to the request object\r\n-    req.user = {\r\n-      id: decodedToken.id,\r\n-      role: decodedToken.role,\r\n-    };\r\n-console.log(req.u)\r\n-    // Proceed to the next middleware or route handler\r\n-    next();\r\n-  } catch (error) {\r\n-    console.error('Token verification failed:', error);\r\n-    return res.status(400).json({ error: `Token verification failed: ${error.message}` });\r\n-  }\r\n-};\r\n\\ No newline at end of file\n"
                },
                {
                    "date": 1740317229482,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,1 +1,20 @@\n-\n+import jwt from 'jsonwebtoken';\r\n+export const tokenChecker = (req, res, next) => {\r\n+  const authHeader = req.get('Authorization');\r\n+  if (!authHeader) {\r\n+    return res.status(401).json({ error: 'No token provided. Please log in.' });\r\n+  }\r\n+  \r\n+  const token = authHeader.split(' ')[1];\r\n+  try {\r\n+    const decodedToken = jwt.verify(token, process.env.SECRET_STRING);\r\n+    if (!decodedToken) {\r\n+      return res.status(401).json({ error: 'Invalid token. Please log in again.' });\r\n+    }\r\n+    // Attach user information to req\r\n+    req.user = { id: decodedToken.userId, role: decodedToken.role };\r\n+    next();\r\n+  } catch (error) {\r\n+    return res.status(400).json({ error: `Token verification failed: ${error.message}` });\r\n+  }\r\n+};\r\n"
                },
                {
                    "date": 1740317292178,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,20 +1,27 @@\n import jwt from 'jsonwebtoken';\r\n+\r\n export const tokenChecker = (req, res, next) => {\r\n+  // Retrieve the Authorization header from the incoming request\r\n   const authHeader = req.get('Authorization');\r\n   if (!authHeader) {\r\n+    // If the header is missing, respond with a 401 Unauthorized status\r\n     return res.status(401).json({ error: 'No token provided. Please log in.' });\r\n   }\r\n   \r\n+  // The header should be in the format \"Bearer <token>\"\r\n   const token = authHeader.split(' ')[1];\r\n   try {\r\n+    // Verify the token using the secret stored in your environment variables\r\n     const decodedToken = jwt.verify(token, process.env.SECRET_STRING);\r\n     if (!decodedToken) {\r\n+      // If verification fails (though jwt.verify should throw in this case), send an error\r\n       return res.status(401).json({ error: 'Invalid token. Please log in again.' });\r\n     }\r\n-    // Attach user information to req\r\n+    // Attach user data from the token to the request object for later use in resolvers or routes\r\n     req.user = { id: decodedToken.userId, role: decodedToken.role };\r\n     next();\r\n   } catch (error) {\r\n+    // If token verification fails, return a 400 Bad Request with the error message\r\n     return res.status(400).json({ error: `Token verification failed: ${error.message}` });\r\n   }\r\n };\r\n"
                }
            ],
            "date": 1740305029942,
            "name": "Commit-0",
            "content": "import jwt from 'jsonwebtoken';\r\n\r\n// Middleware to verify the token\r\nexport const tokenChecker = (req, res, next) => {\r\n    const authHeader = req.get('Authorization'); // Retrieve Authorization header\r\n\r\n    if (!authHeader) {\r\n        // Respond with an error if no token is provided\r\n        return res.status(401).json({ error: 'No token provided. Please log in.' });\r\n    }\r\n\r\n    const token = authHeader.split(' ')[1]; // Extract the token\r\n    let decodedToken;\r\n\r\n    try {\r\n        // Verify the token\r\n        decodedToken = jwt.verify(token, process.env.SECRET_STRING);\r\n\r\n        if (!decodedToken) {\r\n            return res.status(401).json({ error: 'Invalid token. Please log in again.' });\r\n        }\r\n\r\n        // Attach user data to the request object\r\n        req.user = {\r\n            id: decodedToken.id,\r\n            role: decodedToken.role,\r\n        };\r\nconsol\r\n        next(); // Proceed to the next middleware or route handler\r\n    } catch (error) {\r\n        // Handle token verification errors\r\n        return res.status(400).json({ error: `Token verification failed: ${error.message}` });\r\n    }\r\n};\r\n\r\n"
        }
    ]
}