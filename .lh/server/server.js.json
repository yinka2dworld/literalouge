{
    "sourceFile": "server/server.js",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 2,
            "patches": [
                {
                    "date": 1735474861243,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1735474868741,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,57 @@\n+import express from 'express';\r\n+import { ApolloServer } from 'apollo-server-express';\r\n+import { graphqlUploadExpress } from 'graphql-upload';\r\n+import cors from 'cors';\r\n+import dotenv from 'dotenv';\r\n+import { typeDefs } from './graphql/schema.js';\r\n+import { resolvers } from './graphql/resolvers.js';\r\n+import { seedAdmin } from './utils/seeder.js';\r\n+\r\n+// Load environment variables from .env file\r\n+dotenv.config();\r\n+\r\n+// Start the server asynchronously\r\n+const startServer = async () => {\r\n+  try {\r\n+    // Create an ApolloServer instance\r\n+    const server = new ApolloServer({\r\n+      typeDefs, \r\n+      resolvers, \r\n+      \r\n+      context: ({ req, res }) => ({ req, res }), // Provide context to resolvers\r\n+    });\r\n+\r\n+    // Start the ApolloServer\r\n+    await server.start();\r\n+\r\n+    // Create an Express app instance\r\n+    const app = express();\r\n+    const port = process.env.PORT || 4000; // Use environment variable or default to 4000\r\n+\r\n+    // Middleware for handling file uploads\r\n+    app.use(graphqlUploadExpress());\r\n+\r\n+    // Seed the admin user if necessary\r\n+    await seedAdmin();\r\n+\r\n+    // Middleware for handling JSON requests\r\n+    app.use(express.json());\r\n+\r\n+    // Enable CORS\r\n+    app.use(cors());\r\n+\r\n+    // Apply the Apollo GraphQL server middleware to the Express app\r\n+    server.applyMiddleware({ app, path: '/graphql' });\r\n+\r\n+    // Start the server and listen on the specified port\r\n+    app.listen(port, () => {\r\n+      console.log(`Server is running at http://localhost:${port}/graphql`);\r\n+    });\r\n+  } catch (error) {\r\n+    // Handle any errors during the server startup\r\n+    console.error('Error starting the server:', error);\r\n+  }\r\n+};\r\n+\r\n+// Call the function to start the server\r\n+startServer();\r\n"
                },
                {
                    "date": 1735474882166,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,58 @@\n+import express from 'express';\r\n+import { ApolloServer } from 'apollo-server-express';\r\n+import { graphqlUploadExpress } from 'graphql-upload';\r\n+import cors from 'cors';\r\n+import dotenv from 'dotenv';\r\n+import { typeDefs } from './graphql/schema.js';\r\n+import { resolvers } from './graphql/resolvers.js';\r\n+import { seedAdmin } from './utils/seeder.js';\r\n+\r\n+// Load environment variables from .env file\r\n+dotenv.config();\r\n+\r\n+// Start the server asynchronously\r\n+const startServer = async () => {\r\n+  try {\r\n+    // Create an ApolloServer instance\r\n+    const server = new ApolloServer({\r\n+      typeDefs, \r\n+      resolvers, \r\n+      cache: 'bounded', \r\n+      persistedQueries: false,\r\n+      context: ({ req, res }) => ({ req, res }), // Provide context to resolvers\r\n+    });\r\n+\r\n+    // Start the ApolloServer\r\n+    await server.start();\r\n+\r\n+    // Create an Express app instance\r\n+    const app = express();\r\n+    const port = process.env.PORT || 4000; // Use environment variable or default to 4000\r\n+\r\n+    // Middleware for handling file uploads\r\n+    app.use(graphqlUploadExpress());\r\n+\r\n+    // Seed the admin user if necessary\r\n+    await seedAdmin();\r\n+\r\n+    // Middleware for handling JSON requests\r\n+    app.use(express.json());\r\n+\r\n+    // Enable CORS\r\n+    app.use(cors());\r\n+\r\n+    // Apply the Apollo GraphQL server middleware to the Express app\r\n+    server.applyMiddleware({ app, path: '/graphql' });\r\n+\r\n+    // Start the server and listen on the specified port\r\n+    app.listen(port, () => {\r\n+      console.log(`Server is running at http://localhost:${port}/graphql`);\r\n+    });\r\n+  } catch (error) {\r\n+    // Handle any errors during the server startup\r\n+    console.error('Error starting the server:', error);\r\n+  }\r\n+};\r\n+\r\n+// Call the function to start the server\r\n+startServer();\r\n"
                }
            ],
            "date": 1735474861243,
            "name": "Commit-0",
            "content": "import express from 'express';\r\nimport { ApolloServer } from 'apollo-server-express';\r\nimport { graphqlUploadExpress } from 'graphql-upload';\r\nimport cors from 'cors';\r\nimport dotenv from 'dotenv';\r\nimport { typeDefs } from './graphql/schema.js';\r\nimport { resolvers } from './graphql/resolvers.js';\r\nimport { seedAdmin } from './utils/seeder.js';\r\n\r\n// Load environment variables from .env file\r\ndotenv.config();\r\n\r\n// Start the server asynchronously\r\nconst startServer = async () => {\r\n  try {\r\n    // Create an ApolloServer instance\r\n    const server = new ApolloServer({\r\n      typeDefs, // GraphQL schema definition\r\n      resolvers, \r\n      context: ({ req, res }) => ({ req, res }), // Provide context to resolvers\r\n    });\r\n\r\n    // Start the ApolloServer\r\n    await server.start();\r\n\r\n    // Create an Express app instance\r\n    const app = express();\r\n    const port = process.env.PORT || 4000; // Use environment variable or default to 4000\r\n\r\n    // Middleware for handling file uploads\r\n    app.use(graphqlUploadExpress());\r\n\r\n    // Seed the admin user if necessary\r\n    await seedAdmin();\r\n\r\n    // Middleware for handling JSON requests\r\n    app.use(express.json());\r\n\r\n    // Enable CORS\r\n    app.use(cors());\r\n\r\n    // Apply the Apollo GraphQL server middleware to the Express app\r\n    server.applyMiddleware({ app, path: '/graphql' });\r\n\r\n    // Start the server and listen on the specified port\r\n    app.listen(port, () => {\r\n      console.log(`Server is running at http://localhost:${port}/graphql`);\r\n    });\r\n  } catch (error) {\r\n    // Handle any errors during the server startup\r\n    console.error('Error starting the server:', error);\r\n  }\r\n};\r\n\r\n// Call the function to start the server\r\nstartServer();\r\n"
        }
    ]
}