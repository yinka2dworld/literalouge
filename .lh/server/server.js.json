{
    "sourceFile": "server/server.js",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 10,
            "patches": [
                {
                    "date": 1736531423486,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1736531439494,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -26,9 +26,9 @@\n     await server.start();\r\n \r\n     // Create an Express app instance\r\n     const app = express();\r\n-    const port = process.env.PORT; // Use environment variable or default to 4000\r\n+    const port = process.env.PORT; \r\n \r\n     // Middleware for handling file uploads\r\n     app.use(graphqlUploadExpress());\r\n \r\n"
                },
                {
                    "date": 1736531445182,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -26,9 +26,9 @@\n     await server.start();\r\n \r\n     // Create an Express app instance\r\n     const app = express();\r\n-    const port = process.env.PORT; \r\n+    const port = process.env.PORT || 4000; // Use environment variable or default to 4000\r\n \r\n     // Middleware for handling file uploads\r\n     app.use(graphqlUploadExpress());\r\n \r\n"
                },
                {
                    "date": 1740126907239,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -9,8 +9,10 @@\n \r\n // Load environment variables from .env file\r\n dotenv.config();\r\n \r\n+\r\n+\r\n // Start the server asynchronously\r\n const startServer = async () => {\r\n   try {\r\n     // Create an ApolloServer instance\r\n"
                },
                {
                    "date": 1740127086700,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,76 @@\n+import express from 'express';\r\n+import { ApolloServer } from 'apollo-server-express';\r\n+import { graphqlUploadExpress } from 'graphql-upload';\r\n+import cors from 'cors';\r\n+import dotenv from 'dotenv';\r\n+import { typeDefs } from './graphql/schema.js';\r\n+import { resolvers } from './graphql/resolvers.js';\r\n+import { seedAdmin } from './utils/seeder.js';\r\n+\r\n+// Load environment variables from .env file\r\n+dotenv.config();\r\n+\r\n+const storage = multer.diskStorage({\r\n+  destination: (req, file, cb) => {\r\n+      cb(null, 'images/');\r\n+  },\r\n+  filename: (req, file, cb) => {\r\n+      cb(null, uuidv4() + '-' + Date.now() + path.extname(file.originalname));\r\n+  }\r\n+});\r\n+const fileFilter = (req, file, cb) => {\r\n+  const allowedFileTypes = ['image/jpeg', 'image/jpg', 'image/png'];\r\n+  if (allowedFileTypes.includes(file.mimetype)) {\r\n+      cb(null, true);\r\n+  } else {\r\n+      cb(null, false);\r\n+  }\r\n+};\r\n+\r\n+// Start the server asynchronously\r\n+const startServer = async () => {\r\n+  try {\r\n+    // Create an ApolloServer instance\r\n+    const server = new ApolloServer({\r\n+      typeDefs, \r\n+      resolvers, \r\n+      cache: 'bounded', \r\n+      persistedQueries: false,\r\n+      context: ({ req, res }) => ({ req, res }), \r\n+    });\r\n+\r\n+    // Start the ApolloServer\r\n+    await server.start();\r\n+\r\n+    // Create an Express app instance\r\n+    const app = express();\r\n+    const port = process.env.PORT || 4000; // Use environment variable or default to 4000\r\n+\r\n+    // Middleware for handling file uploads\r\n+    app.use(graphqlUploadExpress());\r\n+\r\n+    // Seed the admin user if necessary\r\n+    await seedAdmin();\r\n+\r\n+    // Middleware for handling JSON requests\r\n+    app.use(express.json());\r\n+\r\n+    // Enable CORS\r\n+    app.use(cors());\r\n+    \r\n+\r\n+    // Apply the Apollo GraphQL server middleware to the Express app\r\n+    server.applyMiddleware({ app, path: '/graphql' });\r\n+\r\n+    // Start the server and listen on the specified port\r\n+    app.listen(port, () => {\r\n+      console.log(`Server is running at http://localhost:${port}/graphql`);\r\n+    });\r\n+  } catch (error) {\r\n+    // Handle any errors during the server startup\r\n+    console.error('Error starting the server:', error);\r\n+  }\r\n+};\r\n+\r\n+// Call the function to start the server\r\n+startServer();\r\n"
                },
                {
                    "date": 1740127095868,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,78 @@\n+import express from 'express';\r\n+import { ApolloServer } from 'apollo-server-express';\r\n+import { graphqlUploadExpress } from 'graphql-upload';\r\n+import cors from 'cors';\r\n+import dotenv from 'dotenv';\r\n+import { typeDefs } from './graphql/schema.js';\r\n+import { resolvers } from './graphql/resolvers.js';\r\n+import { seedAdmin } from './utils/seeder.js';\r\n+\r\n+// Load environment variables from .env file\r\n+dotenv.config();\r\n+\r\n+const storage = multer.diskStorage({\r\n+  destination: (req, file, cb) => {\r\n+      cb(null, 'images/');\r\n+  },\r\n+  filename: (req, file, cb) => {\r\n+      cb(null, uuidv4() + '-' + Date.now() + path.extname(file.originalname));\r\n+  }\r\n+});\r\n+const fileFilter = (req, file, cb) => {\r\n+  const allowedFileTypes = ['image/jpeg', 'image/jpg', 'image/png'];\r\n+  if (allowedFileTypes.includes(file.mimetype)) {\r\n+      cb(null, true);\r\n+  } else {\r\n+      cb(null, false);\r\n+  }\r\n+};\r\n+\r\n+// Start the server asynchronously\r\n+const startServer = async () => {\r\n+  try {\r\n+    // Create an ApolloServer instance\r\n+    const server = new ApolloServer({\r\n+      typeDefs, \r\n+      resolvers, \r\n+      cache: 'bounded', \r\n+      persistedQueries: false,\r\n+      context: ({ req, res }) => ({ req, res }), \r\n+    });\r\n+\r\n+    // Start the ApolloServer\r\n+    await server.start();\r\n+\r\n+    // Create an Express app instance\r\n+    const app = express();\r\n+    const port = process.env.PORT || 4000; // Use environment variable or default to 4000\r\n+\r\n+    // Middleware for handling file uploads\r\n+    app.use(graphqlUploadExpress());\r\n+\r\n+    // Seed the admin user if necessary\r\n+    await seedAdmin();\r\n+\r\n+    // Middleware for handling JSON requests\r\n+    app.use(express.json());\r\n+\r\n+    // Enable CORS\r\n+    app.use(cors());\r\n+\r\n+    app.use(multer({ storage: storage, fileFilter: fileFilter }).single('photo'));\r\n+     app.use('/images', express.static('images'));\r\n+\r\n+    // Apply the Apollo GraphQL server middleware to the Express app\r\n+    server.applyMiddleware({ app, path: '/graphql' });\r\n+\r\n+    // Start the server and listen on the specified port\r\n+    app.listen(port, () => {\r\n+      console.log(`Server is running at http://localhost:${port}/graphql`);\r\n+    });\r\n+  } catch (error) {\r\n+    // Handle any errors during the server startup\r\n+    console.error('Error starting the server:', error);\r\n+  }\r\n+};\r\n+\r\n+// Call the function to start the server\r\n+startServer();\r\n"
                },
                {
                    "date": 1740127110830,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,78 @@\n+import express from 'express';\r\n+import { ApolloServer } from 'apollo-server-express';\r\n+import { graphqlUploadExpress } from 'graphql-upload';\r\n+import cors from 'cors';\r\n+import dotenv from 'dotenv';\r\n+import { typeDefs } from './graphql/schema.js';\r\n+import { resolvers } from './graphql/resolvers.js';\r\n+import { seedAdmin } from './utils/seeder.js';\r\n+\r\n+// Load environment variables from .env file\r\n+dotenv.config();\r\n+\r\n+const storage = multer.diskStorage({\r\n+  destination: (req, file, cb) => {\r\n+      cb(null, 'images/');\r\n+  },\r\n+  filename: (req, file, cb) => {\r\n+      cb(null, uuidv4() + '-' + Date.now() + path.extname(file.originalname));\r\n+  }\r\n+});\r\n+const fileFilter = (req, file, cb) => {\r\n+  const allowedFileTypes = ['image/jpeg', 'image/jpg', 'image/png'];\r\n+  if (allowedFileTypes.includes(file.mimetype)) {\r\n+      cb(null, true);\r\n+  } else {\r\n+      cb(null, false);\r\n+  }\r\n+};\r\n+\r\n+// Start the server asynchronously\r\n+const startServer = async () => {\r\n+  try {\r\n+    // Create an ApolloServer instance\r\n+    const server = new ApolloServer({\r\n+      typeDefs, \r\n+      resolvers, \r\n+      cache: 'bounded', \r\n+      persistedQueries: false,\r\n+      context: ({ req, res }) => ({ req, res }), \r\n+    });\r\n+\r\n+    // Start the ApolloServer\r\n+    await server.start();\r\n+\r\n+    // Create an Express app instance\r\n+    const app = express();\r\n+    const port = process.env.PORT || 4000; // Use environment variable or default to 4000\r\n+\r\n+    // Middleware for handling file uploads\r\n+    app.use(graphqlUploadExpress());\r\n+\r\n+    // Seed the admin user if necessary\r\n+    await seedAdmin();\r\n+\r\n+    // Middleware for handling JSON requests\r\n+    app.use(express.json());\r\n+\r\n+    // Enable CORS\r\n+    app.use(cors());\r\n+\r\n+    app.use(multer({ storage: storage, fileFilter: fileFilter }).single(''));\r\n+     app.use('/images', express.static('images'));\r\n+\r\n+    // Apply the Apollo GraphQL server middleware to the Express app\r\n+    server.applyMiddleware({ app, path: '/graphql' });\r\n+\r\n+    // Start the server and listen on the specified port\r\n+    app.listen(port, () => {\r\n+      console.log(`Server is running at http://localhost:${port}/graphql`);\r\n+    });\r\n+  } catch (error) {\r\n+    // Handle any errors during the server startup\r\n+    console.error('Error starting the server:', error);\r\n+  }\r\n+};\r\n+\r\n+// Call the function to start the server\r\n+startServer();\r\n"
                },
                {
                    "date": 1740127120509,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -57,10 +57,10 @@\n \r\n     // Enable CORS\r\n     app.use(cors());\r\n \r\n-    app.use(multer({ storage: storage, fileFilter: fileFilter }).single(''));\r\n-     app.use('/images', express.static('images'));\r\n+    app.use(multer({ storage: storage, fileFilter: fileFilter }).single('book'));\r\n+     app.use('/', express.static('images'));\r\n \r\n     // Apply the Apollo GraphQL server middleware to the Express app\r\n     server.applyMiddleware({ app, path: '/graphql' });\r\n \r\n@@ -75,218 +75,4 @@\n };\r\n \r\n // Call the function to start the server\r\n startServer();\r\n-import express from 'express';\r\n-import { ApolloServer } from 'apollo-server-express';\r\n-import { graphqlUploadExpress } from 'graphql-upload';\r\n-import cors from 'cors';\r\n-import dotenv from 'dotenv';\r\n-import { typeDefs } from './graphql/schema.js';\r\n-import { resolvers } from './graphql/resolvers.js';\r\n-import { seedAdmin } from './utils/seeder.js';\r\n-\r\n-// Load environment variables from .env file\r\n-dotenv.config();\r\n-\r\n-const storage = multer.diskStorage({\r\n-  destination: (req, file, cb) => {\r\n-      cb(null, 'images/');\r\n-  },\r\n-  filename: (req, file, cb) => {\r\n-      cb(null, uuidv4() + '-' + Date.now() + path.extname(file.originalname));\r\n-  }\r\n-});\r\n-const fileFilter = (req, file, cb) => {\r\n-  const allowedFileTypes = ['image/jpeg', 'image/jpg', 'image/png'];\r\n-  if (allowedFileTypes.includes(file.mimetype)) {\r\n-      cb(null, true);\r\n-  } else {\r\n-      cb(null, false);\r\n-  }\r\n-};\r\n-\r\n-// Start the server asynchronously\r\n-const startServer = async () => {\r\n-  try {\r\n-    // Create an ApolloServer instance\r\n-    const server = new ApolloServer({\r\n-      typeDefs, \r\n-      resolvers, \r\n-      cache: 'bounded', \r\n-      persistedQueries: false,\r\n-      context: ({ req, res }) => ({ req, res }), \r\n-    });\r\n-\r\n-    // Start the ApolloServer\r\n-    await server.start();\r\n-\r\n-    // Create an Express app instance\r\n-    const app = express();\r\n-    const port = process.env.PORT || 4000; // Use environment variable or default to 4000\r\n-\r\n-    // Middleware for handling file uploads\r\n-    app.use(graphqlUploadExpress());\r\n-\r\n-    // Seed the admin user if necessary\r\n-    await seedAdmin();\r\n-\r\n-    // Middleware for handling JSON requests\r\n-    app.use(express.json());\r\n-\r\n-    // Enable CORS\r\n-    app.use(cors());\r\n-\r\n-    app.use(multer({ storage: storage, fileFilter: fileFilter }).single('photo'));\r\n-     app.use('/images', express.static('images'));\r\n-\r\n-    // Apply the Apollo GraphQL server middleware to the Express app\r\n-    server.applyMiddleware({ app, path: '/graphql' });\r\n-\r\n-    // Start the server and listen on the specified port\r\n-    app.listen(port, () => {\r\n-      console.log(`Server is running at http://localhost:${port}/graphql`);\r\n-    });\r\n-  } catch (error) {\r\n-    // Handle any errors during the server startup\r\n-    console.error('Error starting the server:', error);\r\n-  }\r\n-};\r\n-\r\n-// Call the function to start the server\r\n-startServer();\r\n-import express from 'express';\r\n-import { ApolloServer } from 'apollo-server-express';\r\n-import { graphqlUploadExpress } from 'graphql-upload';\r\n-import cors from 'cors';\r\n-import dotenv from 'dotenv';\r\n-import { typeDefs } from './graphql/schema.js';\r\n-import { resolvers } from './graphql/resolvers.js';\r\n-import { seedAdmin } from './utils/seeder.js';\r\n-\r\n-// Load environment variables from .env file\r\n-dotenv.config();\r\n-\r\n-const storage = multer.diskStorage({\r\n-  destination: (req, file, cb) => {\r\n-      cb(null, 'images/');\r\n-  },\r\n-  filename: (req, file, cb) => {\r\n-      cb(null, uuidv4() + '-' + Date.now() + path.extname(file.originalname));\r\n-  }\r\n-});\r\n-const fileFilter = (req, file, cb) => {\r\n-  const allowedFileTypes = ['image/jpeg', 'image/jpg', 'image/png'];\r\n-  if (allowedFileTypes.includes(file.mimetype)) {\r\n-      cb(null, true);\r\n-  } else {\r\n-      cb(null, false);\r\n-  }\r\n-};\r\n-\r\n-// Start the server asynchronously\r\n-const startServer = async () => {\r\n-  try {\r\n-    // Create an ApolloServer instance\r\n-    const server = new ApolloServer({\r\n-      typeDefs, \r\n-      resolvers, \r\n-      cache: 'bounded', \r\n-      persistedQueries: false,\r\n-      context: ({ req, res }) => ({ req, res }), \r\n-    });\r\n-\r\n-    // Start the ApolloServer\r\n-    await server.start();\r\n-\r\n-    // Create an Express app instance\r\n-    const app = express();\r\n-    const port = process.env.PORT || 4000; // Use environment variable or default to 4000\r\n-\r\n-    // Middleware for handling file uploads\r\n-    app.use(graphqlUploadExpress());\r\n-\r\n-    // Seed the admin user if necessary\r\n-    await seedAdmin();\r\n-\r\n-    // Middleware for handling JSON requests\r\n-    app.use(express.json());\r\n-\r\n-    // Enable CORS\r\n-    app.use(cors());\r\n-    \r\n-\r\n-    // Apply the Apollo GraphQL server middleware to the Express app\r\n-    server.applyMiddleware({ app, path: '/graphql' });\r\n-\r\n-    // Start the server and listen on the specified port\r\n-    app.listen(port, () => {\r\n-      console.log(`Server is running at http://localhost:${port}/graphql`);\r\n-    });\r\n-  } catch (error) {\r\n-    // Handle any errors during the server startup\r\n-    console.error('Error starting the server:', error);\r\n-  }\r\n-};\r\n-\r\n-// Call the function to start the server\r\n-startServer();\r\n-import express from 'express';\r\n-import { ApolloServer } from 'apollo-server-express';\r\n-import { graphqlUploadExpress } from 'graphql-upload';\r\n-import cors from 'cors';\r\n-import dotenv from 'dotenv';\r\n-import { typeDefs } from './graphql/schema.js';\r\n-import { resolvers } from './graphql/resolvers.js';\r\n-import { seedAdmin } from './utils/seeder.js';\r\n-\r\n-// Load environment variables from .env file\r\n-dotenv.config();\r\n-\r\n-\r\n-\r\n-// Start the server asynchronously\r\n-const startServer = async () => {\r\n-  try {\r\n-    // Create an ApolloServer instance\r\n-    const server = new ApolloServer({\r\n-      typeDefs, \r\n-      resolvers, \r\n-      cache: 'bounded', \r\n-      persistedQueries: false,\r\n-      context: ({ req, res }) => ({ req, res }), \r\n-    });\r\n-\r\n-    // Start the ApolloServer\r\n-    await server.start();\r\n-\r\n-    // Create an Express app instance\r\n-    const app = express();\r\n-    const port = process.env.PORT || 4000; // Use environment variable or default to 4000\r\n-\r\n-    // Middleware for handling file uploads\r\n-    app.use(graphqlUploadExpress());\r\n-\r\n-    // Seed the admin user if necessary\r\n-    await seedAdmin();\r\n-\r\n-    // Middleware for handling JSON requests\r\n-    app.use(express.json());\r\n-\r\n-    // Enable CORS\r\n-    app.use(cors());\r\n-\r\n-    // Apply the Apollo GraphQL server middleware to the Express app\r\n-    server.applyMiddleware({ app, path: '/graphql' });\r\n-\r\n-    // Start the server and listen on the specified port\r\n-    app.listen(port, () => {\r\n-      console.log(`Server is running at http://localhost:${port}/graphql`);\r\n-    });\r\n-  } catch (error) {\r\n-    // Handle any errors during the server startup\r\n-    console.error('Error starting the server:', error);\r\n-  }\r\n-};\r\n-\r\n-// Call the function to start the server\r\n-startServer();\r\n"
                },
                {
                    "date": 1740127125848,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,78 @@\n+import express from 'express';\r\n+import { ApolloServer } from 'apollo-server-express';\r\n+import { graphqlUploadExpress } from 'graphql-upload';\r\n+import cors from 'cors';\r\n+import dotenv from 'dotenv';\r\n+import { typeDefs } from './graphql/schema.js';\r\n+import { resolvers } from './graphql/resolvers.js';\r\n+import { seedAdmin } from './utils/seeder.js';\r\n+\r\n+// Load environment variables from .env file\r\n+dotenv.config();\r\n+\r\n+const storage = multer.diskStorage({\r\n+  destination: (req, file, cb) => {\r\n+      cb(null, 'images/');\r\n+  },\r\n+  filename: (req, file, cb) => {\r\n+      cb(null, uuidv4() + '-' + Date.now() + path.extname(file.originalname));\r\n+  }\r\n+});\r\n+const fileFilter = (req, file, cb) => {\r\n+  const allowedFileTypes = ['image/jpeg', 'image/jpg', 'image/png'];\r\n+  if (allowedFileTypes.includes(file.mimetype)) {\r\n+      cb(null, true);\r\n+  } else {\r\n+      cb(null, false);\r\n+  }\r\n+};\r\n+\r\n+// Start the server asynchronously\r\n+const startServer = async () => {\r\n+  try {\r\n+    // Create an ApolloServer instance\r\n+    const server = new ApolloServer({\r\n+      typeDefs, \r\n+      resolvers, \r\n+      cache: 'bounded', \r\n+      persistedQueries: false,\r\n+      context: ({ req, res }) => ({ req, res }), \r\n+    });\r\n+\r\n+    // Start the ApolloServer\r\n+    await server.start();\r\n+\r\n+    // Create an Express app instance\r\n+    const app = express();\r\n+    const port = process.env.PORT || 4000; // Use environment variable or default to 4000\r\n+\r\n+    // Middleware for handling file uploads\r\n+    app.use(graphqlUploadExpress());\r\n+\r\n+    // Seed the admin user if necessary\r\n+    await seedAdmin();\r\n+\r\n+    // Middleware for handling JSON requests\r\n+    app.use(express.json());\r\n+\r\n+    // Enable CORS\r\n+    app.use(cors());\r\n+\r\n+    app.use(multer({ storage: storage, fileFilter: fileFilter }).single('book'));\r\n+     app.use('/b', express.static('images'));\r\n+\r\n+    // Apply the Apollo GraphQL server middleware to the Express app\r\n+    server.applyMiddleware({ app, path: '/graphql' });\r\n+\r\n+    // Start the server and listen on the specified port\r\n+    app.listen(port, () => {\r\n+      console.log(`Server is running at http://localhost:${port}/graphql`);\r\n+    });\r\n+  } catch (error) {\r\n+    // Handle any errors during the server startup\r\n+    console.error('Error starting the server:', error);\r\n+  }\r\n+};\r\n+\r\n+// Call the function to start the server\r\n+startServer();\r\n"
                },
                {
                    "date": 1740127135261,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -58,9 +58,9 @@\n     // Enable CORS\r\n     app.use(cors());\r\n \r\n     app.use(multer({ storage: storage, fileFilter: fileFilter }).single('book'));\r\n-     app.use('/book', express.static('images'));\r\n+     app.use('/books', express.static('images'));\r\n \r\n     // Apply the Apollo GraphQL server middleware to the Express app\r\n     server.applyMiddleware({ app, path: '/graphql' });\r\n \r\n"
                },
                {
                    "date": 1740127140615,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,78 @@\n+import express from 'express';\r\n+import { ApolloServer } from 'apollo-server-express';\r\n+import { graphqlUploadExpress } from 'graphql-upload';\r\n+import cors from 'cors';\r\n+import dotenv from 'dotenv';\r\n+import { typeDefs } from './graphql/schema.js';\r\n+import { resolvers } from './graphql/resolvers.js';\r\n+import { seedAdmin } from './utils/seeder.js';\r\n+\r\n+// Load environment variables from .env file\r\n+dotenv.config();\r\n+\r\n+const storage = multer.diskStorage({\r\n+  destination: (req, file, cb) => {\r\n+      cb(null, 'images/');\r\n+  },\r\n+  filename: (req, file, cb) => {\r\n+      cb(null, uuidv4() + '-' + Date.now() + path.extname(file.originalname));\r\n+  }\r\n+});\r\n+const fileFilter = (req, file, cb) => {\r\n+  const allowedFileTypes = ['image/jpeg', 'image/jpg', 'image/png'];\r\n+  if (allowedFileTypes.includes(file.mimetype)) {\r\n+      cb(null, true);\r\n+  } else {\r\n+      cb(null, false);\r\n+  }\r\n+};\r\n+\r\n+// Start the server asynchronously\r\n+const startServer = async () => {\r\n+  try {\r\n+    // Create an ApolloServer instance\r\n+    const server = new ApolloServer({\r\n+      typeDefs, \r\n+      resolvers, \r\n+      cache: 'bounded', \r\n+      persistedQueries: false,\r\n+      context: ({ req, res }) => ({ req, res }), \r\n+    });\r\n+\r\n+    // Start the ApolloServer\r\n+    await server.start();\r\n+\r\n+    // Create an Express app instance\r\n+    const app = express();\r\n+    const port = process.env.PORT || 4000; // Use environment variable or default to 4000\r\n+\r\n+    // Middleware for handling file uploads\r\n+    app.use(graphqlUploadExpress());\r\n+\r\n+    // Seed the admin user if necessary\r\n+    await seedAdmin();\r\n+\r\n+    // Middleware for handling JSON requests\r\n+    app.use(express.json());\r\n+\r\n+    // Enable CORS\r\n+    app.use(cors());\r\n+\r\n+    app.use(multer({ storage: storage, fileFilter: fileFilter }).single('book'));\r\n+     app.use('/books', express.static('s'));\r\n+\r\n+    // Apply the Apollo GraphQL server middleware to the Express app\r\n+    server.applyMiddleware({ app, path: '/graphql' });\r\n+\r\n+    // Start the server and listen on the specified port\r\n+    app.listen(port, () => {\r\n+      console.log(`Server is running at http://localhost:${port}/graphql`);\r\n+    });\r\n+  } catch (error) {\r\n+    // Handle any errors during the server startup\r\n+    console.error('Error starting the server:', error);\r\n+  }\r\n+};\r\n+\r\n+// Call the function to start the server\r\n+startServer();\r\n"
                }
            ],
            "date": 1736531423486,
            "name": "Commit-0",
            "content": "import express from 'express';\r\nimport { ApolloServer } from 'apollo-server-express';\r\nimport { graphqlUploadExpress } from 'graphql-upload';\r\nimport cors from 'cors';\r\nimport dotenv from 'dotenv';\r\nimport { typeDefs } from './graphql/schema.js';\r\nimport { resolvers } from './graphql/resolvers.js';\r\nimport { seedAdmin } from './utils/seeder.js';\r\n\r\n// Load environment variables from .env file\r\ndotenv.config();\r\n\r\n// Start the server asynchronously\r\nconst startServer = async () => {\r\n  try {\r\n    // Create an ApolloServer instance\r\n    const server = new ApolloServer({\r\n      typeDefs, \r\n      resolvers, \r\n      cache: 'bounded', \r\n      persistedQueries: false,\r\n      context: ({ req, res }) => ({ req, res }), \r\n    });\r\n\r\n    // Start the ApolloServer\r\n    await server.start();\r\n\r\n    // Create an Express app instance\r\n    const app = express();\r\n    const port = process.env.PORT; // Use environment variable or default to 4000\r\n\r\n    // Middleware for handling file uploads\r\n    app.use(graphqlUploadExpress());\r\n\r\n    // Seed the admin user if necessary\r\n    await seedAdmin();\r\n\r\n    // Middleware for handling JSON requests\r\n    app.use(express.json());\r\n\r\n    // Enable CORS\r\n    app.use(cors());\r\n\r\n    // Apply the Apollo GraphQL server middleware to the Express app\r\n    server.applyMiddleware({ app, path: '/graphql' });\r\n\r\n    // Start the server and listen on the specified port\r\n    app.listen(port, () => {\r\n      console.log(`Server is running at http://localhost:${port}/graphql`);\r\n    });\r\n  } catch (error) {\r\n    // Handle any errors during the server startup\r\n    console.error('Error starting the server:', error);\r\n  }\r\n};\r\n\r\n// Call the function to start the server\r\nstartServer();\r\n"
        }
    ]
}